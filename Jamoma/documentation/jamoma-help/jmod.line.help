max v2;
#N vpatcher 64 58 397 468;
#P window setfont "Sans Serif" 9.;
#P window linecount 1;
#P newex 101 272 27 9109513 f;
#P window linecount 4;
#P comment 139 202 146 9109513 a number (int/float) to the second inlet will set the start point of the ramp without actually sending a value out.;
#P window linecount 1;
#P message 93 236 23 9109513 900;
#P window linecount 7;
#P comment 139 265 165 9109513 By connecting as shown here \, this can be used to ensure that when a list is received \, a ramp is generated from the current value to the new value (first number) over the specified number of milliseconds (second number).;
#P window linecount 1;
#P message 73 203 60 9109513 450 2500;
#P flonum 44 343 35 9 0 0 0 139 0 0 0 221 221 221 222 222 222 0 0 0;
#P flonum 44 151 35 9 0 0 0 139 0 0 0 221 221 221 222 222 222 0 0 0;
#P newex 44 306 59 9109513 jmod.line;
#P window setfont "Sans Serif" 18.;
#P comment 15 19 189 9109522 jmod.line;
#B frgb 255 255 255;
#P window setfont "Sans Serif" 9.;
#P comment 16 45 221 9109513 generate ramping functions;
#B frgb 255 255 255;
#P window linecount 2;
#P comment 16 80 274 9109513 A wrapper around the standard line object \, used throughout Jamoma for implementing ramp enabled parameters.;
#P window linecount 3;
#P comment 86 143 146 9109513 sending a number (int/float) to the left inlet sets the internal value and sends it out;
#P user panel 9 13 287 50;
#X brgb 67 65 107;
#X frgb 0 0 0;
#X border 0;
#X rounded 0;
#X shadow 0;
#X done;
#P connect 8 0 5 0;
#P connect 6 0 5 0;
#P connect 5 0 7 0;
#P connect 12 0 5 1;
#P connect 10 0 5 1;
#P fasten 5 0 12 0 49 337 132 337 132 267 106 267;
#P pop;
