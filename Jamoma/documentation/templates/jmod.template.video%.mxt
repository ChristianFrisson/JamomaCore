max v2;#N vpatcher 549 386 1403 870;#P window setfont "Sans Serif" 9.;#P window linecount 3;#P comment 479 312 324 196617 If you need to return messages from your algorithm to the rest of the world. you can specify type \, range... etc as in jcom.parameter or jcom.message;#B color 12;#P window linecount 1;#P comment 457 292 300 196617 jcom.return:;#B color 12;#P window linecount 2;#P comment 474 257 324 196617 If you need to send messages to or within the patch \, but it's not required that they be stored or retrieveable \, use jcom.message.;#B color 12;#P window linecount 1;#P comment 455 242 300 196617 jcom.message:;#B color 12;#P window linecount 2;#P comment 474 188 317 196617 Use this for any parameters that you'd like to be able to store and retrieve.;#B color 12;#P window linecount 1;#P comment 455 173 235 196617 jcom.parameter:;#B color 12;#P comment 560 448 241 196617 for html autodoc of module;#B color 12;#P comment 560 403 256 196617 1 (default)/0 --- 1 means that repetitions are allowed;#B color 12;#P comment 560 388 241 196617 none/linear/linear.q (none);#B color 12;#P comment 560 433 241 196617 none \, low \, high \, both (default);#B color 12;#P window linecount 0;#P comment 560 418 241 196617;#B color 12;#P window linecount 1;#P comment 560 373 241 196617 generic (default) \, msg_int \, msg_float \, menu \, toggle;#B color 12;#P comment 477 448 79 196617 @description;#B color 12;#P comment 477 403 79 196617 @repetitions;#B color 12;#P comment 477 388 79 196617 @ramp;#B color 12;#P comment 477 433 79 196617 @clipmode;#B color 12;#P comment 477 418 79 196617 @range;#B color 12;#P comment 477 373 79 196617 @type;#B color 12;#P comment 458 358 235 196617 Attributes for jcom.parameter and jcom.message:;#B color 12;#P message 94 69 197 196617 /preset/store 1 default\\\, /preset/write;#B color 3;#P newex 259 270 167 196617 jcom.return return_c @range 0. 1.;#P newex 145 250 58 196617 jcom.out 1;#P newex 226 196 52 196617 jcom.in 1;#P message 117 327 142 196617 param_a 0;#P newex 117 304 57 196617 prepend set;#P window linecount 2;#P message 27 220 65 196617 \; max refresh;#P window linecount 1;#P comment 9 43 65 196617 Message B;#B frgb 149 149 149;#P number 78 42 35 9 0 0 8224 3 181 181 181 221 221 221 255 255 255 0 0 0;#P objectname MessageB;#P comment 9 21 65 196617 Parameter A;#B frgb 149 149 149;#P number 77 21 35 9 0 0 8224 3 181 181 181 221 221 221 255 255 255 0 0 0;#P objectname ParameterA;#P newex 477 111 75 196617 pvar MessageB;#P newex 477 133 195 196617 jcom.message message_b @type msg_int;#P newex 477 51 88 196617 pvar ParameterA;#P newex 477 71 263 196617 jcom.parameter param_a @repetitions 0 @type msg_int;#P objectname param_a;#P message 106 87 125 196617 /documentation/generate;#B color 3;#P window linecount 2;#P newex 0 114 337 196617 jcom.hub jmod.video.template @size 1U-half @module_type video @algorithm_type jitter @description "This module doesn't do much yet.";#P objectname jmod.hub;#P window linecount 1;#P comment 160 274 75 196617 VIDEO OUTPUT;#P outlet 145 274 13 0;#P inlet 226 175 13 0;#P comment 241 175 65 196617 VIDEO INPUT;#P newex 145 226 91 196617 jalg.mblur%.mxt;#P message 236 87 31 196617 /init;#P comment 15 86 79 196617 command input;#P outlet 0 171 13 0;#P inlet 0 84 13 0;#P comment 238 228 174 196617 <- substitute for desired algorithm;#B color 12;#P bpatcher 0 0 256 60 0 0 jcom.gui.mxt 0;#P objectname jmod.gui.1Uh.v.mxb;#P fasten 27 0 11 0 99 109 5 109;#P fasten 5 0 11 0 241 109 5 109;#P fasten 12 0 11 0 111 109 5 109;#P connect 2 0 11 0;#P connect 11 0 3 0;#P fasten 24 1 22 0 252 217 122 217;#P connect 22 0 23 0;#P fasten 24 1 6 0 252 219 150 219;#P connect 6 0 25 0;#P connect 25 0 9 0;#P connect 8 0 24 0;#P connect 24 0 6 1;#P fasten 13 0 14 0 482 94 470 94 470 46 482 46;#P connect 14 0 13 0;#P fasten 15 0 16 0 482 157 470 157 470 104 482 104;#P pop;