max v2;#N vpatcher 220 44 824 645;#P origin -62 -37;#P window setfont "Sans Serif" 9.;#P window linecount 1;#P newex 168 487 47 196617 gate 2 1;#P newex 205 512 68 196617 jit.transpose;#P newex 205 348 35 196617 gate 2;#P newex 205 304 27 196617 t 1 l;#P newex 205 452 91 196617 jcom.float2char%;#P newex 205 420 98 196617 jit.op @op / @val 8;#N vpatcher 584 102 1209 379;#P outlet 430 212 15 0;#P window setfont "Sans Serif" 9.;#P window linecount 1;#P newex 40 158 118 196617 jit.matrix 4 float32 5 5;#P newex 182 66 72 196617 jit.matrixinfo;#P newex 256 120 65 196617 jcom.change;#P newex 182 120 65 196617 jcom.change;#P outlet 140 212 15 0;#P inlet 40 35 15 0;#P newex 182 92 158 196617 jcom.pass dim planecount;#P newex 357 161 65 196617 jcom.change;#P newex 382 115 58 196617 unpack 1 1;#P newex 357 139 61 196617 pak dim 1 1;#P newex 382 93 77 196617 route dim;#P window linecount 0;#P comment 459 156 139 196617 This is the trick to collapse to an nx1 matrix.;#P fasten 9 0 11 0 261 147 45 147;#P fasten 8 0 11 0 187 147 45 147;#P connect 6 0 11 0;#P connect 9 0 7 0;#P fasten 11 0 7 0 45 188 145 188;#P fasten 4 0 7 0 362 195 145 195;#P fasten 6 0 10 0 45 57 187 57;#P connect 10 0 5 0;#P connect 5 0 8 0;#P connect 5 1 9 0;#P connect 2 0 4 0;#P fasten 10 0 1 0 187 88 387 88;#P connect 1 0 3 0;#P connect 3 0 2 1;#P connect 3 1 12 0;#P pop;#P newobj 205 219 66 196617 p matrixinfo;#P newex 177 29 48 196617 loadbang;#P newex 116 29 58 196617 r jcom.init;#P number 52 104 35 9 0 0 0 3 0 0 0 221 221 221 222 222 222 0 0 0;#P newex 14 79 27 196617 + 1;#P message 107 80 14 196617 2;#P message 52 80 14 196617 1;#P newex 52 55 121 196617 route horizontal vertical;#P newex 14 29 98 196617 patcherargs @mode;#P newex 124 130 47 196617 gate 2 1;#P outlet 205 566 15 0;#P inlet 252 22 15 0;#P newex 161 155 68 196617 jit.transpose;#P window linecount 2;#P comment 359 67 141 196617 Based on example by Joshua Kit Clayton on the Max list.;#P comment 297 286 208 196617 jit.scanwrap in spew mode to output a sequence of row vectors;#P window linecount 1;#P newex 258 356 54 196617 jcom.thru;#P window linecount 4;#P comment 350 405 208 196617 for the first vector \, set the right input \, then for each subsequent vector operate on the left + right vectors. the result of each operation placed into the right input;#P window linecount 1;#P newex 205 381 63 196617 jit.op @op +;#P newex 161 189 142 196617 t b l 2 reset;#P newex 205 262 199 196617 jit.scanwrap 4 float32 @mode 2 @adapt 0;#P connect 11 0 15 0;#P fasten 11 1 12 0 107 50 57 50;#P connect 18 0 13 0;#P connect 17 0 13 0;#P connect 12 0 13 0;#P fasten 15 0 16 0 19 100 57 100;#P connect 13 0 16 0;#P fasten 14 0 16 0 112 99 57 99;#P connect 12 1 14 0;#P fasten 16 0 10 0 57 124 129 124;#P fasten 8 0 10 1 257 95 166 95;#P connect 10 1 7 0;#P connect 10 0 1 0;#P connect 7 0 1 0;#P connect 16 0 25 0;#P connect 1 1 19 0;#P fasten 1 3 0 0 298 246 210 246;#P connect 19 0 0 0;#P connect 0 0 22 0;#P connect 22 0 23 0;#P connect 1 2 23 0;#P connect 23 0 2 0;#P connect 2 0 20 0;#P connect 20 0 21 0;#P connect 21 0 25 1;#P connect 25 1 24 0;#P connect 25 0 9 0;#P connect 24 0 9 0;#P connect 22 1 23 1;#P fasten 2 0 4 0 210 404 315 404 315 351 263 351;#P connect 4 0 2 1;#P connect 23 1 2 1;#P connect 19 1 20 1;#P pop;