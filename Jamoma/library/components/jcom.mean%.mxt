max v2;#N vpatcher 590 44 1234 726;#P origin -114 -46;#P window setfont "Sans Serif" 9.;#P number 90 113 35 9 0 0 0 3 0 0 0 221 221 221 222 222 222 0 0 0;#P window linecount 1;#P newex 52 88 27 196617 + 1;#P message 145 88 14 196617 2;#P message 90 88 14 196617 1;#P newex 90 64 121 196617 route horizontal vertical;#P newex 52 38 98 196617 patcherargs @mode;#P newex 162 135 47 196617 gate 2 1;#P outlet 217 614 15 0;#P inlet 316 58 15 0;#P newex 199 164 68 196617 jit.transpose;#P window linecount 2;#P comment 487 255 141 196617 Based on example by Joshua Kit Clayton on the Max list.;#P window linecount 4;#P comment 417 637 219 196617 output column sum/product/min/max/etc. to calculate rowwise operation \, one could use jit.transform to preform a row/column swap prior to sending matrix through this patch.;#P window linecount 1;#P newex 272 508 55 196617 prepend op;#P comment 349 491 108 196617 set the operator;#P user ubumenu 272 487 60 196617 0 1 1 0;#X add pass;#X add *;#X add /;#X add +;#X add -;#X add +m;#X add -m;#X add %;#X add min;#X add max;#X add abs;#X add avg;#X add absdiff;#X add !pass;#X add !/;#X add !-;#X add !%;#X add &;#X add |;#X add ^;#X add ~;#X add >>;#X add <<;#X add &&;#X add ||;#X add !;#X add >;#X add <;#X add >=;#X add <=;#X add ==;#X add !=;#X add >p;#X add #X add >=p;#X add <=p;#X add ==p;#X add !=p;#X add sin;#X add cos;#X add tan;#X add asin;#X add acos;#X add atan;#X add atan2;#X add sinh;#X add cosh;#X add tanh;#X add asinh;#X add acosh;#X add atanh;#X add exp;#X add exp2;#X add ln;#X add log2;#X add log10;#X add hypot;#X add pow;#X add sqrt;#X add ceil;#X add floor;#X add round;#X add trunc;#X add ignore;#X prefix_set 0 0 <none> 0;#X pattrmode 1;#P window linecount 2;#P comment 432 437 208 196617 jit.scanwrap in spew mode to output a sequence of row vectors;#P window linecount 1;#N vpatcher 20 74 420 374;#P outlet 91 142 15 0;#P inlet 91 67 15 0;#P connect 0 0 1 0;#P pop;#P newobj 309 539 35 196617 p noop;#P newex 217 583 95 196617 jit.matrix @thru 0;#P window linecount 4;#P comment 350 530 208 196617 for the first vector \, set the right input \, then for each subsequent vector operate on the left + right vectors. the result of each operation placed into the right input;#P window linecount 1;#P newex 217 539 63 196617 jit.op @op +;#P newex 217 495 35 196617 gate 2;#P newex 217 451 27 196617 t 1 l;#P newex 199 198 64 196617 t b l 2 reset;#P newex 329 286 55 196617 unpack 0 0;#P newex 304 316 61 196617 pak dim 1 1;#P newex 329 264 77 196617 route dim;#P newex 329 239 71 196617 jit.matrixinfo;#P newex 217 425 153 196617 jit.scanwrap @mode 2 @adapt 0;#P connect 22 0 26 0;#P fasten 22 1 23 0 145 59 95 59;#P connect 23 0 24 0;#P connect 25 0 27 0;#P connect 24 0 27 0;#P connect 26 0 27 0;#P connect 23 1 25 0;#P fasten 27 0 21 0 95 133 167 133;#P fasten 19 0 21 1 321 104 204 104;#P connect 21 1 18 0;#P connect 21 0 5 0;#P connect 18 0 5 0;#P fasten 5 3 0 0 258 320 222 320;#P connect 5 1 0 0;#P fasten 2 1 0 0 401 405 222 405;#P fasten 3 0 0 0 309 395 222 395;#P connect 0 0 6 0;#P fasten 5 2 7 0 240 227 426 227 426 477 222 477;#P connect 6 0 7 0;#P connect 15 0 8 0;#P connect 7 0 8 0;#P connect 8 0 10 0;#P fasten 5 0 10 0 204 577 222 577;#P connect 10 0 20 0;#P connect 6 1 7 1;#P fasten 11 0 8 1 314 567 293 567 282 531 275 531;#P connect 7 1 8 1;#P connect 13 1 15 0;#P fasten 8 0 11 0 222 567 283 567 289 533 314 533;#P connect 21 0 1 0;#P fasten 18 0 1 0 204 188 334 188;#P connect 1 0 2 0;#P connect 2 0 4 0;#P connect 4 0 3 1;#P pop;