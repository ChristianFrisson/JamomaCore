max v2;#N vpatcher 262 44 1187 611;#P origin -62 -46;#P user jit.cellblock 369 479 641 617 3 9 6 1 45 17 0 0 1 0 0 0 0 0 1 0 0 0 255 255 255 0 0 0 0 0 0 191 191 191 0 0 0 215 215 240 1 1 1 0 4 0 0 0;#P button 408 30 15 0;#P window setfont "Sans Serif" 9.;#P window linecount 1;#P newex 408 53 97 196617 jit.noise 4 char 6 8;#P user jit.cellblock 408 91 680 229 3 9 6 8 45 17 0 0 1 0 0 0 0 0 1 0 0 0 255 255 255 0 0 0 0 0 0 191 191 191 0 0 0 215 215 240 1 1 1 0 4 0 0 0;#P newex 177 38 48 196617 loadbang;#P newex 116 38 58 196617 r jcom.init;#N vpatcher 387 65 882 491;#P origin 0 -1;#P window setfont "Sans Serif" 9.;#P window linecount 1;#P newex 93 159 41 196617 sel 1 2;#P newex 93 137 60 196617 r $0_mode;#P newex 182 193 27 196617 i;#P newex 137 193 27 196617 i;#P newex 39 254 64 196617 jit.op @op /;#P newex 154 98 55 196617 unpack 0 0;#P newex 142 252 61 196617 pak dim 1 1;#P newex 154 76 77 196617 route dim;#P newex 154 51 71 196617 jit.matrixinfo;#P inlet 39 21 15 0;#P inlet 154 21 15 0;#P outlet 39 332 15 0;#P window linecount 3;#P comment 234 182 219 196617 Rather than changing the matrix to a float32 earlier on \, I divide each value by the corresponding value for rows or columns here.;#P connect 3 0 8 0;#P connect 8 0 1 0;#P fasten 6 0 1 0 147 300 44 300;#P fasten 5 1 1 0 226 322 44 322;#P connect 11 0 12 0;#P connect 10 0 8 1;#P connect 9 0 8 1;#P connect 12 0 9 0;#P connect 2 0 4 0;#P connect 4 0 5 0;#P connect 5 0 7 0;#P connect 7 0 9 1;#P connect 7 0 6 1;#P connect 12 1 10 0;#P connect 7 1 10 1;#P pop;#P newobj 179 239 106 196617 p check-matrix-stuff;#P newex 52 139 60 196617 s $0_mode;#P number 52 113 35 9 0 0 0 3 0 0 0 221 221 221 222 222 222 0 0 0;#P newex 14 88 27 196617 + 1;#P message 107 89 14 196617 2;#P message 52 89 14 196617 1;#P newex 52 64 121 196617 route horizontal vertical;#P newex 14 38 98 196617 patcherargs @mode;#P newex 124 139 47 196617 gate 2 1;#P outlet 179 497 15 0;#P inlet 252 31 15 0;#P newex 161 164 68 196617 jit.transpose;#P window linecount 2;#P comment 449 255 141 196617 Based on example by Joshua Kit Clayton on the Max list.;#P window linecount 1;#P newex 234 391 55 196617 prepend op;#P comment 295 371 83 196617 set the operator;#P user ubumenu 234 370 60 196617 0 1 1 0;#X add pass;#X add *;#X add /;#X add +;#X add -;#X add +m;#X add -m;#X add %;#X add min;#X add max;#X add abs;#X add avg;#X add absdiff;#X add !pass;#X add !/;#X add !-;#X add !%;#X add &;#X add |;#X add ^;#X add ~;#X add >>;#X add <<;#X add &&;#X add ||;#X add !;#X add >;#X add <;#X add >=;#X add <=;#X add ==;#X add !=;#X add >p;#X add #X add >=p;#X add <=p;#X add ==p;#X add !=p;#X add sin;#X add cos;#X add tan;#X add asin;#X add acos;#X add atan;#X add atan2;#X add sinh;#X add cosh;#X add tanh;#X add asinh;#X add acosh;#X add atanh;#X add exp;#X add exp2;#X add ln;#X add log2;#X add log10;#X add hypot;#X add pow;#X add sqrt;#X add ceil;#X add floor;#X add round;#X add trunc;#X add ignore;#X prefix_set 0 0 <none> 0;#X pattrmode 1;#P window linecount 2;#P comment 394 320 208 196617 jit.scanwrap in spew mode to output a sequence of row vectors;#P window linecount 1;#P newex 256 422 54 196617 jcom.thru;#P newex 179 466 95 196617 jit.matrix @thru 0;#P window linecount 4;#P comment 398 409 208 196617 for the first vector \, set the right input \, then for each subsequent vector operate on the left + right vectors. the result of each operation placed into the right input;#P window linecount 1;#P newex 179 422 63 196617 jit.op @op +;#P newex 179 378 35 196617 gate 2;#P newex 179 334 35 196617 t 1 l;#P newex 161 198 196 196617 t b l 2 reset;#P newex 179 305 153 196617 jit.scanwrap @mode 2 @adapt 0;#P connect 17 0 21 0;#P fasten 17 1 18 0 107 59 57 59;#P connect 18 0 19 0;#P connect 25 0 19 0;#P connect 26 0 19 0;#P fasten 20 0 22 0 112 108 57 108;#P connect 19 0 22 0;#P fasten 21 0 22 0 19 109 57 109;#P connect 22 0 23 0;#P connect 18 1 20 0;#P fasten 22 0 16 0 57 133 129 133;#P connect 28 0 16 1;#P fasten 14 0 16 1 257 104 166 104;#P connect 16 1 13 0;#P connect 16 0 1 0;#P connect 13 0 1 0;#P connect 1 1 24 0;#P connect 1 3 0 0;#P connect 24 0 0 0;#P connect 0 0 2 0;#P fasten 1 2 3 0 290 227 388 227 388 457 184 457;#P connect 2 0 3 0;#P connect 11 0 4 0;#P connect 3 0 4 0;#P connect 4 0 6 0;#P fasten 1 0 6 0 166 461 184 461;#P connect 6 0 15 0;#P connect 2 1 3 1;#P connect 3 1 4 1;#P fasten 7 0 4 1 265 440 253 441 243 415 237 414;#P connect 9 1 11 0;#P fasten 4 0 7 0 184 446 245 446 251 416 261 416;#P connect 13 0 24 1;#P connect 16 0 24 1;#P connect 29 0 28 0;#P connect 28 0 27 0;#P pop;