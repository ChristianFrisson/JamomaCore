































typedef long CPhidgetHandle;










 
 
 
 


































































































































































































































extern "C" __declspec(dllimport) int __stdcall CPhidget_getDeviceType(CPhidgetHandle, char **);
extern "C" __declspec(dllimport) int __stdcall CPhidget_getDeviceName(CPhidgetHandle phidA, char **);
extern "C" __declspec(dllimport) int __stdcall CPhidget_getSerialNumber(CPhidgetHandle, long *);
extern "C" __declspec(dllimport) int __stdcall CPhidget_getDeviceVersion(CPhidgetHandle, long *);
extern "C" __declspec(dllimport) int __stdcall CPhidget_getDeviceStatus(CPhidgetHandle, long *);

extern "C" __declspec(dllimport) int __stdcall CPhidget_getLibraryVersion(char **buffer);

extern "C" __declspec(dllimport) int __stdcall CPhidget_getErrorDescription(int ErrorCode, char **);

extern "C" __declspec(dllimport) int __stdcall CPhidget_getServerID(CPhidgetHandle phidA, long *id);
extern "C" __declspec(dllimport) int __stdcall CPhidget_getServerAddress(CPhidgetHandle phidA, char **IPAddress, int *Port);

extern "C" __declspec(dllimport) int __stdcall CPhidget_open(CPhidgetHandle phidA, int serialNumber);
extern "C" __declspec(dllimport) int __stdcall CPhidget_close(CPhidgetHandle phidA);
extern "C" __declspec(dllimport) int __stdcall CPhidget_delete(CPhidgetHandle);

extern "C" __declspec(dllimport) int __stdcall CPhidget_set_OnDetach_Handler(CPhidgetHandle, int (__stdcall *fptr)(CPhidgetHandle, void *), void *userPtr);
extern "C" __declspec(dllimport) int __stdcall CPhidget_set_OnAttach_Handler(CPhidgetHandle, int (__stdcall *fptr)(CPhidgetHandle, void *), void *userPtr);
extern "C" __declspec(dllimport) int __stdcall CPhidget_set_OnError_Handler(CPhidgetHandle, int (__stdcall *fptr)(CPhidgetHandle, void *, long, void*), void *userPtr);

extern "C" __declspec(dllimport) int __stdcall CPhidget_getTag(CPhidgetHandle phidA, char **buffer);


















































































































































































































































































































































































































































































































































































extern "C" __declspec(dllimport) int __stdcall CHIDReadPacket(CPhidgetHandle, unsigned char *);
extern "C" __declspec(dllimport) int __stdcall CHIDSendPacket(CPhidgetHandle, unsigned char *);
extern "C" __declspec(dllimport) int __stdcall CHIDSetTag(CPhidgetHandle, char *);
extern "C" __declspec(dllimport) void __stdcall CHIDCleanup();
















































































































































































































































































































































































































































































































































































































































































































































































































































































































extern "C" __declspec(dllimport) int __stdcall CPhidget_openRemote(CPhidgetHandle phidA, int SerialNumber, int ServerID, int portNumber, char *passWord);
extern "C" __declspec(dllimport) int __stdcall CPhidget_openRemoteIP(CPhidgetHandle phidA, int SerialNumber, char *IPAddress, int portNumber, char *passWord);


















































































































































































































































































































































































































































































































































































































































































































































































































































































typedef long CPhidgetServoHandle;




















extern "C" __declspec(dllimport) int __stdcall CPhidgetServo_open(CPhidgetServoHandle *, int Reserved, int SerialNumber); extern "C" __declspec(dllimport) int __stdcall CPhidgetServo_close(CPhidgetServoHandle); extern "C" __declspec(dllimport) int __stdcall CPhidgetServo_create(CPhidgetServoHandle *); extern "C" __declspec(dllimport) int __stdcall CPhidgetServo_asciiData(CPhidgetServoHandle, char *buffer);
extern "C" __declspec(dllimport) int __stdcall CPhidgetServo_read(CPhidgetServoHandle); extern "C" __declspec(dllimport) int CPhidgetServo_dataInput(CPhidgetServoHandle, unsigned char *buffer, int length);
extern "C" __declspec(dllimport) int __stdcall CPhidgetServo_getNumMotors(CPhidgetServoHandle, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetServo_getMotorPosition(CPhidgetServoHandle, int Index, double *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetServo_setMotorPosition(CPhidgetServoHandle, int Index, double newVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetServo_set_OnMotorPositionChange_Handler(CPhidgetServoHandle, int (__stdcall *fptr)(CPhidgetServoHandle, void *, int, double), void *);



































































































































































































































































































































































































































typedef long CPhidgetRFIDHandle;























extern "C" __declspec(dllimport) int __stdcall CPhidgetRFID_open(CPhidgetRFIDHandle *, int Reserved, int SerialNumber); extern "C" __declspec(dllimport) int __stdcall CPhidgetRFID_close(CPhidgetRFIDHandle); extern "C" __declspec(dllimport) int __stdcall CPhidgetRFID_create(CPhidgetRFIDHandle *); extern "C" __declspec(dllimport) int __stdcall CPhidgetRFID_asciiData(CPhidgetRFIDHandle, char *buffer);
extern "C" __declspec(dllimport) int __stdcall CPhidgetRFID_read(CPhidgetRFIDHandle); extern "C" __declspec(dllimport) int CPhidgetRFID_dataInput(CPhidgetRFIDHandle, unsigned char *buffer, int length);
extern "C" __declspec(dllimport) int __stdcall CPhidgetRFID_getNumOutputs(CPhidgetRFIDHandle, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetRFID_getOutputState(CPhidgetRFIDHandle, int Index, int *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetRFID_setOutputState(CPhidgetRFIDHandle, int Index, int newVal);

extern "C" __declspec(dllimport) int __stdcall CPhidgetRFID_set_OnOutputChange_Handler(CPhidgetRFIDHandle, int (__stdcall *fptr)(CPhidgetRFIDHandle, void *, int, int), void *);


extern "C" __declspec(dllimport) int __stdcall CPhidgetRFID_getLastTag(CPhidgetRFIDHandle, unsigned char *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetRFID_set_OnTag_Handler(CPhidgetRFIDHandle, int (__stdcall *fptr)(CPhidgetRFIDHandle, void *, unsigned char *), void *);
































































































































































































































































































































































































































typedef long CPhidgetInterfaceKitHandle;




































extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_open(CPhidgetInterfaceKitHandle *, int Reserved, int SerialNumber); extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_close(CPhidgetInterfaceKitHandle); extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_create(CPhidgetInterfaceKitHandle *); extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_asciiData(CPhidgetInterfaceKitHandle, char *buffer);
extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_read(CPhidgetInterfaceKitHandle); extern "C" __declspec(dllimport) int CPhidgetInterfaceKit_dataInput(CPhidgetInterfaceKitHandle, unsigned char *buffer, int length);

extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_getOutputState(CPhidgetInterfaceKitHandle, int Index, int *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_setOutputState(CPhidgetInterfaceKitHandle, int Index, int newVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_getSensorNormalizeMinimum(CPhidgetInterfaceKitHandle, int Index, int *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_setSensorNormalizeMinimum(CPhidgetInterfaceKitHandle, int Index, int newVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_getSensorNormalizeMaximum(CPhidgetInterfaceKitHandle, int Index, int *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_setSensorNormalizeMaximum(CPhidgetInterfaceKitHandle, int Index, int newVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_getSensorChangeTrigger(CPhidgetInterfaceKitHandle, int Index, int *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_setSensorChangeTrigger(CPhidgetInterfaceKitHandle, int Index, int newVal);

extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_getNumInputs(CPhidgetInterfaceKitHandle, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_getNumOutputs(CPhidgetInterfaceKitHandle, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_getNumSensors(CPhidgetInterfaceKitHandle, int *pVal);

extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_getInputState(CPhidgetInterfaceKitHandle, int Index, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_getSensorValue(CPhidgetInterfaceKitHandle, int Index, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_getSensorRawValue(CPhidgetInterfaceKitHandle, int Index, int *pVal);

extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_getRatiometric(CPhidgetInterfaceKitHandle, int *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_setRatiometric(CPhidgetInterfaceKitHandle, int newVal);

extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_set_OnInputChange_Handler(CPhidgetInterfaceKitHandle, int (__stdcall *fptr)(CPhidgetInterfaceKitHandle, void *, int, int), void *);
extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_set_OnOutputChange_Handler(CPhidgetInterfaceKitHandle, int (__stdcall *fptr)(CPhidgetInterfaceKitHandle, void *, int, int), void *);
extern "C" __declspec(dllimport) int __stdcall CPhidgetInterfaceKit_set_OnSensorChange_Handler(CPhidgetInterfaceKitHandle, int (__stdcall *fptr)(CPhidgetInterfaceKitHandle, void *, int, int), void *);
































































































































































































































































































































































































































typedef long CPhidgetTextLEDHandle;












extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLED_open(CPhidgetTextLEDHandle *, int Reserved, int SerialNumber); extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLED_close(CPhidgetTextLEDHandle); extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLED_create(CPhidgetTextLEDHandle *); extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLED_asciiData(CPhidgetTextLEDHandle, char *buffer);
extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLED_getNumRows(CPhidgetTextLEDHandle, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLED_getNumColumns(CPhidgetTextLEDHandle, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLED_getBrightness(CPhidgetTextLEDHandle, int *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLED_setBrightness(CPhidgetTextLEDHandle, int newVal);

extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLED_setDisplayString(CPhidgetTextLEDHandle, int Row, char *displayString);































































































































































































































































































































































































































typedef long CPhidgetAccelerometerHandle;

















extern "C" __declspec(dllimport) int __stdcall CPhidgetAccelerometer_open(CPhidgetAccelerometerHandle *, int Reserved, int SerialNumber); extern "C" __declspec(dllimport) int __stdcall CPhidgetAccelerometer_close(CPhidgetAccelerometerHandle); extern "C" __declspec(dllimport) int __stdcall CPhidgetAccelerometer_create(CPhidgetAccelerometerHandle *); extern "C" __declspec(dllimport) int __stdcall CPhidgetAccelerometer_asciiData(CPhidgetAccelerometerHandle, char *buffer);
extern "C" __declspec(dllimport) int __stdcall CPhidgetAccelerometer_read(CPhidgetAccelerometerHandle); extern "C" __declspec(dllimport) int CPhidgetAccelerometer_dataInput(CPhidgetAccelerometerHandle, unsigned char *buffer, int length);
extern "C" __declspec(dllimport) int __stdcall CPhidgetAccelerometer_getAccelerationChangeTrigger(CPhidgetAccelerometerHandle, int Index, double *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetAccelerometer_setAccelerationChangeTrigger(CPhidgetAccelerometerHandle, int Index, double newVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetAccelerometer_getNumAxis(CPhidgetAccelerometerHandle, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetAccelerometer_getAcceleration(CPhidgetAccelerometerHandle, int Index, double *pVal);

extern "C" __declspec(dllimport) int __stdcall CPhidgetAccelerometer_set_OnAccelerationChange_Handler(CPhidgetAccelerometerHandle, int (__stdcall *fptr)(CPhidgetAccelerometerHandle, void *, int, double), void *);

typedef long CPhidgetMarmotHandle;
typedef long CPhidgetPowerHandle;













































































































































































































































































































































































































































typedef long CPhidgetEncoderHandle;




















extern "C" __declspec(dllimport) int __stdcall CPhidgetEncoder_open(CPhidgetEncoderHandle *, int Reserved, int SerialNumber); extern "C" __declspec(dllimport) int __stdcall CPhidgetEncoder_close(CPhidgetEncoderHandle); extern "C" __declspec(dllimport) int __stdcall CPhidgetEncoder_create(CPhidgetEncoderHandle *); extern "C" __declspec(dllimport) int __stdcall CPhidgetEncoder_asciiData(CPhidgetEncoderHandle, char *buffer);
extern "C" __declspec(dllimport) int __stdcall CPhidgetEncoder_read(CPhidgetEncoderHandle); extern "C" __declspec(dllimport) int CPhidgetEncoder_dataInput(CPhidgetEncoderHandle, unsigned char *buffer, int length);

extern "C" __declspec(dllimport) int __stdcall CPhidgetEncoder_getEncoderPosition(CPhidgetEncoderHandle, int Index, int *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetEncoder_setEncoderPosition(CPhidgetEncoderHandle, int Index, int newVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetEncoder_getNumInputs(CPhidgetEncoderHandle, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetEncoder_getNumEncoders(CPhidgetEncoderHandle, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetEncoder_getInputState(CPhidgetEncoderHandle, int Index, int *pVal);

extern "C" __declspec(dllimport) int __stdcall CPhidgetEncoder_set_OnInputChange_Handler(CPhidgetEncoderHandle, int (__stdcall *fptr)(CPhidgetEncoderHandle, void *, int, int), void *);

extern "C" __declspec(dllimport) int __stdcall CPhidgetEncoder_set_OnPositionChange_Handler(CPhidgetEncoderHandle, int (__stdcall *fptr)(CPhidgetEncoderHandle, void *, int, int, int), void *); 































































































































































































































































































































































































































typedef long CPhidgetStepperHandle;





























extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_open(CPhidgetStepperHandle *, int Reserved, int SerialNumber); extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_close(CPhidgetStepperHandle); extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_create(CPhidgetStepperHandle *); extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_asciiData(CPhidgetStepperHandle, char *buffer);
extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_read(CPhidgetStepperHandle); extern "C" __declspec(dllimport) int CPhidgetStepper_dataInput(CPhidgetStepperHandle, unsigned char *buffer, int length);
extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_getNumInputs(CPhidgetStepperHandle, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_getNumMotors(CPhidgetStepperHandle, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_getInputState(CPhidgetStepperHandle, int Index, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_getAcceleration(CPhidgetStepperHandle, int Index, double *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_setAcceleration(CPhidgetStepperHandle, int Index, double newVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_getMotorSpeed(CPhidgetStepperHandle, int Index, double *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_setMotorSpeed(CPhidgetStepperHandle, int Index, double newVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_getTorque(CPhidgetStepperHandle, int Index, double *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_setTorque(CPhidgetStepperHandle, int Index, double newVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_getMotorPosition(CPhidgetStepperHandle, int Index, double *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_setMotorPosition(CPhidgetStepperHandle, int Index, double newVal);

extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_set_OnInputChange_Handler(CPhidgetStepperHandle, int (__stdcall *fptr)(CPhidgetStepperHandle, void *, int, int), void *);
extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_set_OnPositionChange_Handler(CPhidgetStepperHandle, int (__stdcall *fptr)(CPhidgetStepperHandle, void *, int, double), void *);
extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_set_OnTorqueChange_Handler(CPhidgetStepperHandle, int (__stdcall *fptr)(CPhidgetStepperHandle, void *, int, double), void *);
extern "C" __declspec(dllimport) int __stdcall CPhidgetStepper_set_OnSpeedChange_Handler(CPhidgetStepperHandle, int (__stdcall *fptr)(CPhidgetStepperHandle, void *, int, double), void *);





































































































































































































































































































































































































































typedef long CPhidgetTemperatureSensorHandle;
























extern "C" __declspec(dllimport) int __stdcall CPhidgetTemperatureSensor_open(CPhidgetTemperatureSensorHandle *, int Reserved, int SerialNumber); extern "C" __declspec(dllimport) int __stdcall CPhidgetTemperatureSensor_close(CPhidgetTemperatureSensorHandle); extern "C" __declspec(dllimport) int __stdcall CPhidgetTemperatureSensor_create(CPhidgetTemperatureSensorHandle *); extern "C" __declspec(dllimport) int __stdcall CPhidgetTemperatureSensor_asciiData(CPhidgetTemperatureSensorHandle, char *buffer);
extern "C" __declspec(dllimport) int __stdcall CPhidgetTemperatureSensor_read(CPhidgetTemperatureSensorHandle); extern "C" __declspec(dllimport) int CPhidgetTemperatureSensor_dataInput(CPhidgetTemperatureSensorHandle, unsigned char *buffer, int length);
extern "C" __declspec(dllimport) int __stdcall CPhidgetTemperatureSensor_getNumTemperatureInputs(CPhidgetTemperatureSensorHandle, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetTemperatureSensor_getTemperature(CPhidgetTemperatureSensorHandle, int Index, double *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetTemperatureSensor_getTemperatureChangeTrigger(CPhidgetTemperatureSensorHandle, int Index, double *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetTemperatureSensor_setTemperatureChangeTrigger(CPhidgetTemperatureSensorHandle, int Index, double newVal);

extern "C" __declspec(dllimport) int __stdcall CPhidgetTemperatureSensor_getUseImperial(CPhidgetTemperatureSensorHandle, int *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetTemperatureSensor_setUseImperial(CPhidgetTemperatureSensorHandle, int newVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetTemperatureSensor_set_OnTemperatureChange_Handler(CPhidgetTemperatureSensorHandle, int (__stdcall *fptr)(CPhidgetTemperatureSensorHandle, void *, int, double), void *);
































































































































































































































































































































































































































typedef long CPhidgetMotorControlHandle;
































extern "C" __declspec(dllimport) int __stdcall CPhidgetMotorControl_open(CPhidgetMotorControlHandle *, int Reserved, int SerialNumber); extern "C" __declspec(dllimport) int __stdcall CPhidgetMotorControl_close(CPhidgetMotorControlHandle); extern "C" __declspec(dllimport) int __stdcall CPhidgetMotorControl_create(CPhidgetMotorControlHandle *); extern "C" __declspec(dllimport) int __stdcall CPhidgetMotorControl_asciiData(CPhidgetMotorControlHandle, char *buffer);
extern "C" __declspec(dllimport) int __stdcall CPhidgetMotorControl_read(CPhidgetMotorControlHandle); extern "C" __declspec(dllimport) int CPhidgetMotorControl_dataInput(CPhidgetMotorControlHandle, unsigned char *buffer, int length);
extern "C" __declspec(dllimport) int __stdcall CPhidgetMotorControl_getNumInputs(CPhidgetMotorControlHandle, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetMotorControl_getNumMotors(CPhidgetMotorControlHandle, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetMotorControl_getInputState(CPhidgetMotorControlHandle, int Index, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetMotorControl_getAcceleration(CPhidgetMotorControlHandle, int Index, double *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetMotorControl_setAcceleration(CPhidgetMotorControlHandle, int Index, double newVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetMotorControl_getMotorSpeed(CPhidgetMotorControlHandle, int Index, double *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetMotorControl_setMotorSpeed(CPhidgetMotorControlHandle, int Index, double newVal);

extern "C" __declspec(dllimport) int __stdcall CPhidgetMotorControl_set_OnInputChange_Handler(CPhidgetMotorControlHandle, int (__stdcall *fptr)(CPhidgetMotorControlHandle, void *, int, int), void *);
extern "C" __declspec(dllimport) int __stdcall CPhidgetMotorControl_set_OnMotorChange_Handler(CPhidgetMotorControlHandle, int (__stdcall *fptr)(CPhidgetMotorControlHandle, void *, int, double), void *);
extern "C" __declspec(dllimport) int __stdcall CPhidgetMotorControl_set_OnCurrentChange_Handler(CPhidgetMotorControlHandle, int (__stdcall *fptr)(CPhidgetMotorControlHandle, void *, int, double), void *);


































































































































































































































































































































































































































typedef long CPhidgetLEDHandle;















extern "C" __declspec(dllimport) int __stdcall CPhidgetLED_open(CPhidgetLEDHandle *, int Reserved, int SerialNumber); extern "C" __declspec(dllimport) int __stdcall CPhidgetLED_close(CPhidgetLEDHandle); extern "C" __declspec(dllimport) int __stdcall CPhidgetLED_create(CPhidgetLEDHandle *); extern "C" __declspec(dllimport) int __stdcall CPhidgetLED_asciiData(CPhidgetLEDHandle, char *buffer);
extern "C" __declspec(dllimport) int __stdcall CPhidgetLED_getNumLEDs(CPhidgetLEDHandle, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetLED_getDiscreteLED(CPhidgetLEDHandle, int Index, int *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetLED_setDiscreteLED(CPhidgetLEDHandle, int Index, int newVal);































































































































































































































































































































































































































typedef long CPhidgetTextLCDHandle;














extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLCD_open(CPhidgetTextLCDHandle *, int Reserved, int SerialNumber); extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLCD_close(CPhidgetTextLCDHandle); extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLCD_create(CPhidgetTextLCDHandle *); extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLCD_asciiData(CPhidgetTextLCDHandle, char *buffer);
extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLCD_getNumRows(CPhidgetTextLCDHandle, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLCD_getNumColumns(CPhidgetTextLCDHandle, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLCD_getBacklight(CPhidgetTextLCDHandle, int *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLCD_setBacklight(CPhidgetTextLCDHandle, int newVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLCD_getContrast(CPhidgetTextLCDHandle, int *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLCD_setContrast(CPhidgetTextLCDHandle, int newVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLCD_getCursorOn(CPhidgetTextLCDHandle, int *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLCD_setCursorOn(CPhidgetTextLCDHandle, int newVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLCD_getCursorBlink(CPhidgetTextLCDHandle, int *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLCD_setCursorBlink(CPhidgetTextLCDHandle, int newVal);

extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLCD_setCustomCharacter (CPhidgetTextLCDHandle, int Index, int Val1, int Val2);

extern "C" __declspec(dllimport) int __stdcall CPhidgetTextLCD_setDisplayString(CPhidgetTextLCDHandle, int Row, char *displayString);














































































































































































































































































































































































































































































































































































































































































































































































































































































































































typedef long CPhidgetManagerHandle;















extern "C" __declspec(dllimport) int __stdcall CPhidgetManager_initialize(CPhidgetManagerHandle *phidm);
extern "C" __declspec(dllimport) int __stdcall CPhidgetManager_getCount(CPhidgetManagerHandle phidm, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetManager_getPhidget(CPhidgetManagerHandle phidm, CPhidgetHandle *phid, int Index);
extern "C" __declspec(dllimport) int __stdcall CPhidgetManager_poll(CPhidgetManagerHandle phidm);
extern "C" __declspec(dllimport) int __stdcall CPhidgetManager_set_AttachHandler(CPhidgetManagerHandle phidm, int (__stdcall *fptr)(CPhidgetManagerHandle phidm, void *, CPhidgetHandle phid), void *);
extern "C" __declspec(dllimport) int __stdcall CPhidgetManager_set_DetachHandler(CPhidgetManagerHandle phidm, int (__stdcall *fptr)(CPhidgetManagerHandle phidm, void *, CPhidgetHandle phid), void *);
extern "C" __declspec(dllimport) int __stdcall CPhidgetManager_openRemote(CPhidgetManagerHandle phidA, int ServerID, int portNumber, char *password);
extern "C" __declspec(dllimport) int __stdcall CPhidgetManager_openRemoteIP(CPhidgetManagerHandle phidA, char *IPAddress, int portNumber, char *password);
extern "C" __declspec(dllimport) int __stdcall CPhidgetManager_free(CPhidgetManagerHandle phidm);


































































































































































































































































































































































































































typedef long CPhidgetWeightSensorHandle;























extern "C" __declspec(dllimport) int __stdcall CPhidgetWeightSensor_open(CPhidgetWeightSensorHandle *, int Reserved, int SerialNumber); extern "C" __declspec(dllimport) int __stdcall CPhidgetWeightSensor_close(CPhidgetWeightSensorHandle); extern "C" __declspec(dllimport) int __stdcall CPhidgetWeightSensor_create(CPhidgetWeightSensorHandle *); extern "C" __declspec(dllimport) int __stdcall CPhidgetWeightSensor_asciiData(CPhidgetWeightSensorHandle, char *buffer);
extern "C" __declspec(dllimport) int __stdcall CPhidgetWeightSensor_read(CPhidgetWeightSensorHandle); extern "C" __declspec(dllimport) int CPhidgetWeightSensor_dataInput(CPhidgetWeightSensorHandle, unsigned char *buffer, int length);

extern "C" __declspec(dllimport) int __stdcall CPhidgetWeightSensor_getWeight(CPhidgetWeightSensorHandle, double *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetWeightSensor_getWeightChangeTrigger(CPhidgetWeightSensorHandle, double *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetWeightSensor_setWeightChangeTrigger(CPhidgetWeightSensorHandle, double newVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetWeightSensor_getUseImperial(CPhidgetWeightSensorHandle, int *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetWeightSensor_setUseImperial(CPhidgetWeightSensorHandle, int newVal);

extern "C" __declspec(dllimport) int __stdcall CPhidgetWeightSensor_set_OnWeightChange_Handler(CPhidgetWeightSensorHandle, int (__stdcall *fptr)(CPhidgetWeightSensorHandle, void *, double), void *);

































































































































































































































































































































































































































typedef long CPhidgetAdvancedServoHandle;
























extern "C" __declspec(dllimport) int __stdcall CPhidgetAdvancedServo_open(CPhidgetAdvancedServoHandle *, int Reserved, int SerialNumber); extern "C" __declspec(dllimport) int __stdcall CPhidgetAdvancedServo_close(CPhidgetAdvancedServoHandle); extern "C" __declspec(dllimport) int __stdcall CPhidgetAdvancedServo_create(CPhidgetAdvancedServoHandle *); extern "C" __declspec(dllimport) int __stdcall CPhidgetAdvancedServo_asciiData(CPhidgetAdvancedServoHandle, char *buffer);
extern "C" __declspec(dllimport) int __stdcall CPhidgetAdvancedServo_read(CPhidgetAdvancedServoHandle); extern "C" __declspec(dllimport) int CPhidgetAdvancedServo_dataInput(CPhidgetAdvancedServoHandle, unsigned char *buffer, int length);
extern "C" __declspec(dllimport) int __stdcall CPhidgetAdvancedServo_getNumMotors(CPhidgetAdvancedServoHandle, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetAdvancedServo_getAcceleration(CPhidgetAdvancedServoHandle, int Index, int *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetAdvancedServo_setAcceleration(CPhidgetAdvancedServoHandle, int Index, int newVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetAdvancedServo_getMaxVelocity(CPhidgetAdvancedServoHandle, int Index, int *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetAdvancedServo_setMaxVelocity(CPhidgetAdvancedServoHandle, int Index, int newVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetAdvancedServo_getMotorPosition(CPhidgetAdvancedServoHandle, int Index, double *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetAdvancedServo_setMotorPosition(CPhidgetAdvancedServoHandle, int Index, double newVal);

extern "C" __declspec(dllimport) int __stdcall CPhidgetAdvancedServo_getCurrent(CPhidgetAdvancedServoHandle, int Index, int *pVal);

extern "C" __declspec(dllimport) int __stdcall CPhidgetAdvancedServo_set_OnPositionChange_Handler(CPhidgetAdvancedServoHandle, int (__stdcall *fptr)(CPhidgetAdvancedServoHandle, void *, int, int), void *);






























































































































































































































































































































































































































typedef long CPhidgetPHSensorHandle;























extern "C" __declspec(dllimport) int __stdcall CPhidgetPHSensor_open(CPhidgetPHSensorHandle *, int Reserved, int SerialNumber); extern "C" __declspec(dllimport) int __stdcall CPhidgetPHSensor_close(CPhidgetPHSensorHandle); extern "C" __declspec(dllimport) int __stdcall CPhidgetPHSensor_create(CPhidgetPHSensorHandle *); extern "C" __declspec(dllimport) int __stdcall CPhidgetPHSensor_asciiData(CPhidgetPHSensorHandle, char *buffer);
extern "C" __declspec(dllimport) int __stdcall CPhidgetPHSensor_read(CPhidgetPHSensorHandle); extern "C" __declspec(dllimport) int CPhidgetPHSensor_dataInput(CPhidgetPHSensorHandle, unsigned char *buffer, int length);

extern "C" __declspec(dllimport) int __stdcall CPhidgetPHSensor_getPH(CPhidgetPHSensorHandle, double *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetPHSensor_getPotential(CPhidgetPHSensorHandle, double *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetPHSensor_getPHChangeTrigger(CPhidgetPHSensorHandle, double *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetPHSensor_setPHChangeTrigger(CPhidgetPHSensorHandle, double newVal);

extern "C" __declspec(dllimport) int __stdcall CPhidgetPHSensor_set_OnPHChange_Handler(CPhidgetPHSensorHandle, int (__stdcall *fptr)(CPhidgetPHSensorHandle, void *, double), void *);

































































































































































































































































































































































































































typedef long CPhidgetGyroscopeHandle;




















extern "C" __declspec(dllimport) int __stdcall CPhidgetGyroscope_open(CPhidgetGyroscopeHandle *, int Reserved, int SerialNumber); extern "C" __declspec(dllimport) int __stdcall CPhidgetGyroscope_close(CPhidgetGyroscopeHandle); extern "C" __declspec(dllimport) int __stdcall CPhidgetGyroscope_create(CPhidgetGyroscopeHandle *); extern "C" __declspec(dllimport) int __stdcall CPhidgetGyroscope_asciiData(CPhidgetGyroscopeHandle, char *buffer);
extern "C" __declspec(dllimport) int __stdcall CPhidgetGyroscope_read(CPhidgetGyroscopeHandle); extern "C" __declspec(dllimport) int CPhidgetGyroscope_dataInput(CPhidgetGyroscopeHandle, unsigned char *buffer, int length);
extern "C" __declspec(dllimport) int __stdcall CPhidgetGyroscope_getAngularRateChangeTrigger(CPhidgetGyroscopeHandle, int Index, double *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetGyroscope_setAngularRateChangeTrigger(CPhidgetGyroscopeHandle, int Index, double newVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetGyroscope_getNumAxis(CPhidgetGyroscopeHandle, int *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetGyroscope_getAngularRate(CPhidgetGyroscopeHandle, int Index, double *pVal);

extern "C" __declspec(dllimport) int __stdcall CPhidgetGyroscope_set_OnAngularRateChange_Handler(CPhidgetGyroscopeHandle, int (__stdcall *fptr)(CPhidgetGyroscopeHandle, void *, int, double), void *);































































































































































































































































































































































































































typedef long CPhidgetGPSHandle;


struct __GPSTime
{
	short tm_sec,tm_min,tm_hour;
} typedef GPSTime;
struct __GPSDate
{
	short tm_mday, tm_mon, tm_year;
} typedef GPSDate;

struct __GPSSatInfo
{
	short ID;
	short elevation;
	int azimuth;
	short SNR;
} typedef GPSSatInfo;



struct __GPGGA
{
	GPSTime time;
	double latitude;
	double longitude;
	short fixQuality;
	short numSatellites;
	double horizontalDilution;
	double altitude;
	double heightOfGeoid;
} typedef GPGGA;

struct __GPGSA
{
	char mode;
	

	short fixType;
	


	short satUsed[12];
	
	double posnDilution;
	double horizDilution;
	double vertDilution;
} typedef GPGSA;

struct __GPGSV
{
	short satsInView;
	GPSSatInfo satInfo[12];
} typedef GPGSV;

struct __GPRMC
{
	GPSTime time;
	char status;
	double latitude;
	double longitude;
	double speed;
	double heading;
	GPSDate date;
	double magneticVariation;
} typedef GPRMC;

struct __GPSInfo
{
	GPGGA GGA;
	GPGSA GSA;
	GPGSV GSV;
	GPRMC RMC;
} typedef GPSInfo;


























extern "C" __declspec(dllimport) int __stdcall CPhidgetGPS_open(CPhidgetGPSHandle *, int Reserved, int SerialNumber); extern "C" __declspec(dllimport) int __stdcall CPhidgetGPS_close(CPhidgetGPSHandle); extern "C" __declspec(dllimport) int __stdcall CPhidgetGPS_create(CPhidgetGPSHandle *); extern "C" __declspec(dllimport) int __stdcall CPhidgetGPS_asciiData(CPhidgetGPSHandle, char *buffer);
extern "C" __declspec(dllimport) int __stdcall CPhidgetGPS_read(CPhidgetGPSHandle); extern "C" __declspec(dllimport) int CPhidgetGPS_dataInput(CPhidgetGPSHandle, unsigned char *buffer, int length);

extern "C" __declspec(dllimport) int __stdcall CPhidgetGPS_getLatitude(CPhidgetGPSHandle, double *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetGPS_getLongitude(CPhidgetGPSHandle, double *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetGPS_getAltitude(CPhidgetGPSHandle, double *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetGPS_getTime(CPhidgetGPSHandle, GPSTime *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetGPS_getRawData(CPhidgetGPSHandle, GPSInfo *pVal);
extern "C" __declspec(dllimport) int __stdcall CPhidgetGPS_getPositionChangeTrigger(CPhidgetGPSHandle, double *pVal); extern "C" __declspec(dllimport) int __stdcall CPhidgetGPS_setPositionChangeTrigger(CPhidgetGPSHandle, double newVal);

extern "C" __declspec(dllimport) int __stdcall CPhidgetGPS_set_OnPositionChange_Handler(CPhidgetGPSHandle, int (__stdcall *fptr)(CPhidgetGPSHandle, void *, double,double,double), void *);























