/* 
 * TTBlue Base Class
 * Copyright Â© 2008, Timothy Place
 * 
 * License: This code is licensed under the terms of the GNU LGPL
 * http://www.gnu.org/licenses/lgpl.html 
 */

#include "TTElement.h"
#include "TTEnvironment.h"


const TTFloat64 kTTPi = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068;
const TTFloat64 kTTTwoPi = kTTPi * 2.0;
const TTFloat64 kTTAntiDenormalValue = 1e-18;
const TTFloat64	kTTSqrt2 = sqrt(2.0); 
const TTFloat64 kTTPi_2  = kTTPi / 2.0; 

const TTFloat32 kTTLookupEqualPower[] = {			// 512 point equal-power table
	0.999939F, 0.999908F, 0.999939F, 0.999908F, 0.999908F,
	0.999847F, 0.999817F, 0.999756F, 0.999664F, 0.999695F, 0.999512F, 0.999481F, 0.999298F, 0.999298F, 0.999146F, 
	0.998993F, 0.998840F, 0.998779F, 0.998505F, 0.998474F, 0.998169F, 0.998047F, 0.997864F, 0.997650F, 0.997406F, 
	0.997253F, 0.996918F, 0.996765F, 0.996521F, 0.996155F, 0.996033F, 0.995667F, 0.995331F, 0.995209F, 0.994690F, 
	0.994568F, 0.994049F, 0.993866F, 0.993500F, 0.993073F, 0.992767F, 0.992371F, 0.992004F, 0.991608F, 0.991241F, 
	0.990753F, 0.990387F, 0.989960F, 0.989532F, 0.989044F, 0.988617F, 0.988098F, 0.987732F, 0.987183F, 0.986633F, 
	0.986267F, 0.985565F, 0.985229F, 0.984589F, 0.984131F, 0.983429F, 0.983032F, 0.982391F, 0.981842F, 0.981171F, 
	0.980713F, 0.980011F, 0.979431F, 0.978729F, 0.978241F, 0.977478F, 0.976868F, 0.976227F, 0.975525F, 0.974823F, 
	0.974243F, 0.973419F, 0.972809F, 0.972015F, 0.971375F, 0.970551F, 0.969849F, 0.969116F, 0.968323F, 0.967529F, 
	0.966858F, 0.965912F, 0.965210F, 0.964386F, 0.963562F, 0.962738F, 0.961945F, 0.960999F, 0.960236F, 0.959351F, 
	0.958466F, 0.957611F, 0.956696F, 0.955811F, 0.954895F, 0.953979F, 0.953064F, 0.952118F, 0.951172F, 0.950226F, 
	0.949310F, 0.948242F, 0.947357F, 0.946259F, 0.945404F, 0.944305F, 0.943298F, 0.942291F, 0.941223F, 0.940247F, 
	0.939148F, 0.938080F, 0.937073F, 0.935883F, 0.934937F, 0.933716F, 0.932678F, 0.931549F, 0.930481F, 0.929260F, 
	0.928162F, 0.927002F, 0.925903F, 0.924683F, 0.923523F, 0.922272F, 0.921234F, 0.919922F, 0.918701F, 0.917542F, 
	0.916290F, 0.915070F, 0.913788F, 0.912598F, 0.911285F, 0.910034F, 0.908722F, 0.907501F, 0.906189F, 0.904846F, 
	0.903534F, 0.902222F, 0.900970F, 0.899536F, 0.898193F, 0.896881F, 0.895508F, 0.894165F, 0.892670F, 0.891418F, 
	0.889923F, 0.888611F, 0.887085F, 0.885773F, 0.884216F, 0.882965F, 0.881287F, 0.880005F, 0.878479F, 0.876984F, 
	0.875610F, 0.873932F, 0.872589F, 0.871063F, 0.869476F, 0.868011F, 0.866516F, 0.864899F, 0.863373F, 0.861877F, 
	0.860229F, 0.858765F, 0.857056F, 0.855591F, 0.853912F, 0.852325F, 0.850739F, 0.849091F, 0.847534F, 0.845764F, 
	0.844238F, 0.842560F, 0.840851F, 0.839264F, 0.837524F, 0.835876F, 0.834167F, 0.832489F, 0.830719F, 0.829132F, 
	0.827271F, 0.825592F, 0.823883F, 0.822113F, 0.820343F, 0.818634F, 0.816803F, 0.815033F, 0.813324F, 0.811401F, 
	0.809723F, 0.807861F, 0.806030F, 0.804291F, 0.802338F, 0.800598F, 0.798706F, 0.796844F, 0.795044F, 0.793091F,
	0.791260F, 0.789398F, 0.787476F, 0.785583F, 0.783661F, 0.781799F, 0.779816F, 0.777954F, 0.775970F, 0.774017F, 
	0.772156F, 0.770111F, 0.768127F, 0.766266F, 0.764191F, 
	0.762268F, 0.760193F, 0.758331F, 0.756165F, 0.754242F, 0.752228F, 0.750183F, 0.748108F, 0.746124F, 0.744019F, 
	0.742035F, 0.739899F, 0.737854F, 0.735779F, 0.733673F, 0.731659F, 0.729431F, 0.727448F, 0.725220F, 0.723206F, 
	0.721008F, 0.718964F, 0.716644F, 0.714752F, 0.712341F, 0.710358F, 0.708099F, 0.705994F, 0.703766F, 0.701599F, 
	0.699371F, 0.697235F, 0.694946F, 0.692810F, 0.690552F, 0.688324F, 0.686096F, 0.683868F, 0.681580F, 0.679382F, 
	0.677155F, 0.674744F, 0.672638F, 0.670258F, 0.668030F, 0.665710F, 0.663422F, 0.661102F, 0.658844F, 0.656494F, 
	0.654144F, 0.651886F, 0.649445F, 0.647247F, 0.644745F, 0.642517F, 0.640106F, 0.637756F, 0.635315F, 0.633118F, 
	0.630493F, 0.628326F, 0.625763F, 0.623505F, 0.620941F, 0.618683F, 0.616180F, 0.613770F, 0.611359F, 0.608856F, 
	0.606537F, 0.603973F, 0.601593F, 0.599121F, 0.596649F, 0.594147F, 0.591766F, 0.589172F, 0.586761F, 0.584229F, 
	0.581757F, 0.579254F, 0.576721F, 0.574188F, 0.571777F, 0.569092F, 0.566742F, 0.564026F, 0.561615F, 0.558990F, 
	0.556519F, 0.553925F, 0.551331F, 0.548767F, 0.546295F, 0.543610F, 0.541016F, 0.538544F, 0.535828F, 0.533325F, 
	0.530640F, 0.528107F, 0.525421F, 0.522858F, 0.520203F, 0.517578F, 0.515015F, 0.512238F, 0.509766F, 0.506927F, 
	0.504486F, 0.501648F, 0.499115F, 0.496338F, 0.493774F, 0.491028F, 0.488403F, 0.485657F, 0.483032F, 0.480255F, 
	0.477631F, 0.474915F, 0.472198F, 0.469482F, 0.466705F, 0.464142F, 0.461243F, 0.458649F, 0.455811F, 0.453156F, 
	0.450378F, 0.447632F, 0.444824F, 0.442169F, 0.439423F, 0.436493F, 0.433899F, 0.431061F, 0.428253F, 0.425568F, 
	0.422668F, 0.419952F, 0.417145F, 0.414368F, 0.411499F, 0.408813F, 0.405853F, 0.403229F, 0.400208F, 0.397552F, 
	0.394653F, 0.391876F, 0.388977F, 0.386200F, 0.383331F, 0.380554F, 0.377625F, 0.374786F, 0.372009F, 0.369080F, 
	0.366241F, 0.363403F, 0.360504F, 0.357697F, 0.354706F, 0.351929F, 0.349030F, 0.346191F, 0.343170F, 0.340424F, 
	0.337463F, 0.334595F, 0.331696F, 0.328766F, 0.325897F, 0.322968F, 0.320038F, 0.317230F, 0.314117F, 0.311401F, 
	0.308350F, 0.305511F, 0.302490F, 0.299622F, 0.296661F, 0.293732F, 0.290802F, 0.287872F, 0.284882F, 0.281952F, 
	0.279022F, 0.276031F, 0.273163F, 0.270050F, 0.267242F, 0.264160F, 0.261292F, 0.258301F, 0.255280F, 0.252319F, 
	0.249420F, 0.246368F, 0.243347F, 0.240509F, 0.237396F, 0.234436F, 0.231476F, 0.228485F, 0.225464F, 0.222443F, 
	0.219513F, 0.216461F, 0.213531F, 0.210419F, 0.207489F, 0.204437F, 0.201477F, 0.198456F, 0.195404F, 0.192413F, 
	0.189423F, 0.186340F, 0.183411F, 0.180267F, 0.177338F, 0.174316F, 0.171204F, 0.168213F, 0.165253F, 0.16214F, 
	0.159088F, 0.156158F, 0.153015F, 0.149994F, 0.147003F, 0.143951F, 0.1409F, 0.137787F, 0.134857F, 0.131714F, 
	0.128754F, 0.125641F, 0.122589F, 0.119568F, 0.116547F, 0.113373F, 0.110443F, 0.10733F, 0.10434F, 0.101166F, 
	0.098175F, 0.095154F, 0.09201F, 0.08902F, 0.085907F, 0.082855F, 0.079865F, 0.07666F, 0.07373F, 0.070557F, 
	0.067596F, 0.064392F, 0.061493F, 0.058319F, 0.055237F, 0.052216F, 0.049164F, 0.04599F, 0.04306F, 0.039856F, 
	0.036896F, 0.033752F, 0.030701F, 0.027618F, 0.024567F, 0.021484F, 0.018402F, 0.01532F, 0.012268F,0.009216F, 
	0.006042F, 0.0F
};	

const TTFloat32 kTTLookupSquareRoot[] = {			// 512 point square root (sqrt(1)... sqrt(0)) table
	1.0F,  				  0.999021047244538F,   0.998041134260080F,   0.997060258215480F,   0.996078416265654F,   0.995095605551480F,   0.994111823199704F,   
	0.993127066322842F,   0.992141332019076F,   0.991154617372164F,   0.990166919451329F,   0.989178235311163F,   0.988188561991526F,   0.987197896517438F,   
	0.986206235898976F,   0.985213577131173F,   0.984219917193903F,   0.983225253051786F,   0.982229581654066F,   0.981232899934513F,   0.980235204811308F,   
	0.979236493186932F,   0.978236761948054F,   0.977236007965419F,   0.976234228093730F,   0.975231419171539F,   0.974227578021126F,   0.973222701448379F,   
	0.972216786242685F,   0.971209829176800F,   0.970201827006732F,   0.969192776471624F,   0.968182674293621F,   0.967171517177756F,   0.966159301811816F,   
	0.965146024866221F,   0.964131682993896F,   0.963116272830137F,   0.962099790992488F,   0.961082234080602F,   0.960063598676117F,   0.959043881342511F,   
	0.958023078624979F,   0.957001187050286F,   0.955978203126635F,   0.954954123343526F,   0.953928944171617F,   0.952902662062579F,   0.951875273448955F,   
	0.950846774744015F,   0.949817162341611F,   0.948786432616025F,   0.947754581921827F,   0.946721606593717F,   0.945687502946382F,   0.944652267274332F,   
	0.943615895851755F,   0.942578384932353F,   0.941539730749190F,   0.940499929514527F,   0.939458977419665F,   0.938416870634782F,   0.937373605308764F,   
	0.936329177569044F,   0.935283583521435F,   0.934236819249953F,   0.933188880816656F,   0.932139764261464F,   0.931089465601985F,   0.930037980833344F,   
	0.928985305927999F,   0.927931436835562F,   0.926876369482621F,   0.925820099772552F,   0.924762623585334F,   0.923703936777366F,   0.922644035181270F,   
	0.921582914605708F,   0.920520570835179F,   0.919456999629835F,   0.918392196725272F,   0.917326157832341F,   0.916258878636937F,   0.915190354799804F,   
	0.914120581956322F,   0.913049555716303F,   0.911977271663780F,   0.910903725356793F,   0.909828912327179F,   0.908752828080349F,   0.907675468095070F,   
	0.906596827823249F,   0.905516902689702F,   0.904435688091931F,   0.903353179399895F,   0.902269371955777F,   0.901184261073752F,   0.900097842039752F,   
	0.899010110111222F,   0.897921060516884F,   0.896830688456488F,   0.895738989100571F,   0.894645957590200F,   0.893551589036726F,   0.892455878521528F,   
	0.891358821095750F,   0.890260411780047F,   0.889160645564317F,   0.888059517407435F,   0.886957022236985F,   0.885853154948986F,   0.884747910407618F,   
	0.883641283444939F,   0.882533268860609F,   0.881423861421601F,   0.880313055861913F,   0.879200846882277F,   0.878087229149864F,   0.876972197297987F,   
	0.875855745925796F,   0.874737869597976F,   0.873618562844437F,   0.872497820160001F,   0.871375636004087F,   0.870252004800391F,   0.869126920936565F,   
	0.868000378763884F,   0.866872372596924F,   0.865742896713218F,   0.864611945352924F,   0.863479512718478F,   0.862345592974252F,   0.861210180246197F,   
	0.860073268621494F,   0.858934852148190F,   0.857794924834839F,   0.856653480650129F,   0.855510513522513F,   0.854366017339833F,   0.853219985948935F,   
	0.852072413155287F,   0.850923292722586F,   0.849772618372363F,   0.848620383783582F,   0.847466582592239F,   0.846311208390945F,   0.845154254728517F,   
	0.843995715109554F,   0.842835582994015F,   0.841673851796784F,   0.840510514887237F,   0.839345565588799F,   0.838178997178499F,   0.837010802886515F,   
	0.835840975895715F,   0.834669509341197F,   0.833496396309815F,   0.832321629839704F,   0.831145202919800F,   0.829967108489348F,   0.828787339437411F,   
	0.827605888602368F,   0.826422748771407F,   0.825237912680011F,   0.824051373011438F,   0.822863122396191F,   0.821673153411490F,   0.820481458580726F,   
	0.819288030372914F,   0.818092861202139F,   0.816895943426992F,   0.815697269350002F,   0.814496831217054F,   0.813294621216811F,   0.812090631480113F,   
	0.810884854079383F,   0.809677281028013F,   0.808467904279749F,   0.807256715728066F,   0.806043707205531F,   0.804828870483166F,   0.803612197269792F,   
	0.802393679211368F,   0.801173307890328F,   0.799951074824894F,   0.798726971468396F,   0.797500989208571F,   0.796273119366856F,   0.795043353197671F,   
	0.793811681887694F,   0.792578096555124F,   0.791342588248931F,   0.790105147948101F,   0.788865766560867F,   0.787624434923928F,   0.786381143801662F,   
	0.785135883885321F,   0.783888645792218F,   0.782639420064905F,   0.781388197170333F,   0.780134967499007F,   0.778879721364121F,   0.777622449000686F,   
	0.776363140564644F,   0.775101786131970F,   0.773838375697758F,   0.772572899175293F,   0.771305346395117F,   0.770035707104069F,   0.768763970964325F,   
	0.767490127552408F,   0.766214166358195F,   0.764936076783909F,   0.763655848143083F,   0.762373469659526F,   0.761088930466262F,   0.759802219604452F,   
	0.758513326022308F,   0.757222238573986F,   0.755928946018454F,   0.754633437018361F,   0.753335700138868F,   0.752035723846475F,   0.750733496507825F,   
	0.749429006388489F,   0.748122241651732F,   0.746813190357257F,   0.745501840459940F,   0.744188179808529F,   0.742872196144334F,   0.741553877099890F,   
	0.740233210197605F,   0.738910182848379F,   0.737584782350205F,   0.736256995886744F,   0.734926810525882F,   0.733594213218261F,   0.732259190795781F,   
	0.730921729970088F,   0.729581817331024F,   0.728239439345064F,   0.726894582353718F,   0.725547232571911F,   0.724197376086335F,   0.722844998853770F,   
	0.721490086699380F,   0.720132625314985F,   0.718772600257290F,   0.717409996946098F,   0.716044800662482F,   0.714676996546934F,   0.713306569597477F,   
	0.711933504667742F,   0.710557786465018F,   0.709179399548267F,   0.707798328326094F,   0.706414557054699F,   0.705028069835776F,   0.703638850614386F,   
	0.702246883176783F,   0.700852151148215F,   0.699454637990666F,   0.698054327000576F,   0.696651201306508F,   0.695245243866777F,   0.693836437467035F,   
	0.692424764717814F,   0.691010208052019F,   0.689592749722376F,   0.688172371798840F,   0.686749056165943F,   0.685322784520103F,   0.683893538366873F,   
	0.682461299018145F,   0.681026047589303F,   0.679587764996311F,   0.678146431952756F,   0.676702028966833F,   0.675254536338262F,   0.673803934155163F,   
	0.672350202290851F,   0.670893320400585F,   0.669433267918241F,   0.667970024052927F,   0.666503567785531F,   0.665033877865192F,   0.663560932805713F,   
	0.662084710881894F,   0.660605190125793F,   0.659122348322911F,   0.657636163008302F,   0.656146611462602F,   0.654653670707977F,   0.653157317503985F,   
	0.651657528343359F,   0.650154279447693F,   0.648647546763049F,   0.647137305955464F,   0.645623532406362F,   0.644106201207877F,   0.642585287158067F,   
	0.641060764756032F,   0.639532608196926F,   0.638000791366857F,   0.636465287837687F,   0.634926070861705F,   0.633383113366196F,   0.631836387947884F,   
	0.630285866867252F,   0.628731522042737F,   0.627173325044799F,   0.625611247089854F,   0.624045259034067F,   0.622475331367011F,   0.620901434205175F,   
	0.619323537285332F,   0.617741609957748F,   0.616155621179230F,   0.614565539506029F,   0.612971333086556F,   0.611372969653945F,   0.609770416518428F,   
	0.608163640559537F,   0.606552608218119F,   0.604937285488155F,   0.603317637908383F,   0.601693630553726F,   0.600065228026501F,   0.598432394447418F,   
	0.596795093446355F,   0.595153288152907F,   0.593506941186698F,   0.591856014647451F,   0.590200470104809F,   0.588540268587894F,   0.586875370574609F,   
	0.585205735980653F,   0.583531324148268F,   0.581852093834683F,   0.580168003200261F,   0.578479009796338F,   0.576785070552736F,   0.575086141764952F,   
	0.573382179080996F,   0.571673137487887F,   0.569958971297775F,   0.568239634133691F,   0.566515078914908F,   0.564785257841897F,   0.563050122380869F,   
	0.561309623247887F,   0.559563710392533F,   0.557812332981113F,   0.556055439379389F,   0.554292977134817F,   0.552524892958274F,   0.550751132705259F,   
	0.548971641356545F,   0.547186362998268F,   0.545395240801426F,   0.543598217000772F,   0.541795232873077F,   0.539986228714738F,   0.538171143818710F,   
	0.536349916450737F,   0.534522483824849F,   0.532688782078109F,   0.530848746244571F,   0.529002310228420F,   0.527149406776276F,   0.525289967448601F,   
	0.523423922590214F,   0.521551201299834F,   0.519671731398652F,   0.517785439397871F,   0.515892250465172F,   0.513992088390077F,   0.512084875548152F,   
	0.510170532864002F,   0.508248979773017F,   0.506320134181810F,   0.504383912427290F,   0.502440229234317F,   0.500488997671884F,   0.498530129107740F,   
	0.496563533161421F,   0.494589117655582F,   0.492606788565586F,   0.490616449967257F,   0.488618003982709F,   0.486611350724190F,   0.484596388235812F,   
	0.482573012433111F,   0.480541117040301F,   0.478500593525143F,   0.476451331031289F,   0.474393216308012F,   0.472326133637166F,   0.470249964757263F,   
	0.468164588784522F,   0.466069882130732F,   0.463965718417781F,   0.461851968388683F,   0.459728499814917F,   0.457595177399902F,   0.455451862678397F,   
	0.453298413911625F,   0.451134685977888F,   0.448960530258442F,   0.446775794518363F,   0.444580322782158F,   0.442373955203809F,   0.440156527930957F,   
	0.437927872962898F,   0.435687818002043F,   0.433436186298462F,   0.431172796487126F,   0.428897462417420F,   0.426609992974468F,   0.424310191891791F,   
	0.421997857554777F,   0.419672782794400F,   0.417334754670599F,   0.414983554244674F,   0.412618956340006F,   0.410240729290363F,   0.407848634675001F,   
	0.405442427039692F,   0.403021853602766F,   0.400586653945164F,   0.398136559683428F,   0.395671294124465F,   0.393190571900831F,   0.390694098585167F,   
	0.388181570282322F,   0.385652673197558F,   0.383107083179098F,   0.380544465233131F,   0.377964473009227F,   0.375366748253913F,   0.372750920229970F,   
	0.370116605098803F,   0.367463405262941F,   0.364790908665512F,   0.362098688043168F,   0.359386300128645F,   0.356653284798738F,   0.353899164163047F,   
	0.351123441588392F,   0.348325600653254F,   0.345505104026009F,   0.342661392260052F,   0.339793882498156F,   0.336901967077581F,   0.333985012026464F,   
	0.331042355440947F,   0.328073305731301F,   0.325077139723846F,   0.322053100603939F,   0.319000395683429F,   0.315918193973942F,   0.312805623544927F,   
	0.309661768642666F,   0.306485666543278F,   0.303276304109060F,   0.300032614013251F,   0.296753470593349F,   0.293437685287304F,   0.290084001600130F,   
	0.286691089540498F,   0.283257539457454F,   0.279781855196266F,   0.276262446479137F,   0.272697620400713F,   0.269085571909355F,   0.265424373122285F,   
	0.261711961295107F,   0.257946125232586F,   0.254124489886509F,   0.250244498835942F,   0.246303394282793F,   0.242298194117906F,   0.238225665515645F,   
	0.234082294392261F,   0.229864249907459F,   0.225567342988944F,   0.221186977601905F,   0.216718093149231F,   0.212155095945896F,   0.207491777122337F,   
	0.202721213519846F,   0.197835647062233F,   0.192826336598779F,   0.187683374126956F,   0.182395454332756F,   0.176949582081524F,   0.171330696130026F,   
	0.165521177720474F,   0.159500197841714F,   0.153242833271639F,   0.146718842643652F,   0.139890927598133F,   0.132712186561143F,   0.125122249417971F,   
	0.117041147196131F,   0.108359046574615F,   0.0989178235311166F,  0.0884747910407618F,  0.0766214166358199F,  0.0625611247089854F,  0.0442373955203815F,   
	0.0F
};

const TTFloat32 kTTLookupHalfPaddedwWelch[] = {		// 256 point window table
	0.000000F, 0.000000F, 0.000000F, 0.000000F, 0.000000F, 0.000000F,	0.000000F, 0.000000F, 0.000000F, 0.000000F,
	0.000000F, 0.000000F, 0.000000F, 0.000000F, 0.000000F, 0.000000F, 0.000000F, 0.006989F, 0.014008F, 0.021027F,
	0.028046F, 0.035034F, 0.042053F, 0.049042F, 0.056061F, 0.063049F, 0.070038F, 0.077057F, 0.084045F, 0.091034F,
	0.097992F, 0.104980F, 0.111938F, 0.118927F, 0.125885F, 0.132812F, 0.139771F, 0.146698F, 0.153656F, 0.160583F,
	0.167480F, 0.174408F, 0.181305F, 0.188202F, 0.195068F, 0.201935F, 0.208801F, 0.215668F, 0.222504F, 0.229340F,
	0.236145F, 0.242950F, 0.249756F, 0.256531F, 0.263306F, 0.270081F, 0.276825F, 0.283539F, 0.290253F, 0.296967F,
	0.303650F, 0.310333F, 0.316986F, 0.323639F, 0.330261F, 0.336853F, 0.343445F, 0.350037F, 0.356598F, 0.363129F,
	0.369659F, 0.376160F, 0.382660F, 0.389130F, 0.395569F, 0.402008F, 0.408417F, 0.414795F, 0.421173F, 0.427521F,
	0.433868F, 0.440155F, 0.446442F, 0.452698F, 0.458954F, 0.465179F, 0.471375F, 0.477539F, 0.483704F, 0.489807F,
	0.495911F, 0.501984F, 0.508057F, 0.514069F, 0.520081F, 0.526062F, 0.532013F, 0.537933F, 0.543823F, 0.549683F,
	0.555542F, 0.561340F, 0.567139F, 0.572906F, 0.578644F, 0.584351F, 0.590027F, 0.595673F, 0.601288F, 0.606873F,
	0.612427F, 0.617950F, 0.623444F, 0.628937F, 0.634369F, 0.639771F, 0.645142F, 0.650482F, 0.655792F, 0.661072F,
	0.666321F, 0.671509F, 0.676697F, 0.681854F, 0.686951F, 0.692047F, 0.697083F, 0.702087F, 0.707062F, 0.712006F,
	0.716919F, 0.721802F, 0.726624F, 0.731415F, 0.736176F, 0.740906F, 0.745605F, 0.750244F, 0.754883F, 0.759460F,
	0.764008F, 0.768494F, 0.772980F, 0.777405F, 0.781799F, 0.786133F, 0.790466F, 0.794739F, 0.798981F, 0.803162F,
	0.807312F, 0.811432F, 0.815521F, 0.819550F, 0.823547F, 0.827515F, 0.831421F, 0.835297F, 0.839142F, 0.842926F,
	0.846680F, 0.850403F, 0.854065F, 0.857697F, 0.861267F, 0.864807F, 0.868317F, 0.871765F, 0.875183F, 0.878540F,
	0.881866F, 0.885162F, 0.888397F, 0.891602F, 0.894745F, 0.897858F, 0.900940F, 0.903961F, 0.906921F, 0.909851F,
	0.912750F, 0.915588F, 0.918365F, 0.921143F, 0.923828F, 0.926483F, 0.929108F, 0.931671F, 0.934204F, 0.936676F,
	0.939117F, 0.941498F, 0.943848F, 0.946136F, 0.948364F, 0.950592F, 0.952728F, 0.954834F, 0.956909F, 0.958893F,
	0.960876F, 0.962799F, 0.964661F, 0.966492F, 0.968262F, 0.970001F, 0.971680F, 0.973297F, 0.974884F, 0.976410F,
	0.977905F, 0.979340F, 0.980743F, 0.982086F, 0.983368F, 0.984619F, 0.985840F, 0.986969F, 0.988068F, 0.989136F,
	0.990143F, 0.991089F, 0.992004F, 0.992859F, 0.993652F, 0.994415F, 0.995148F, 0.995789F, 0.996429F, 0.996979F,
	0.997498F, 0.997955F, 0.998383F, 0.998749F, 0.999084F, 0.999329F, 0.999573F, 0.999725F, 0.999847F, 0.999939F,
	0.999969F, 0.999969F, 0.999969F, 0.999969F, 0.999969F, 0.999969F, 0.999969F, 0.999969F, 0.999969F, 0.999969F,
	0.999969F, 0.999969F, 0.999969F, 0.999969F, 0.999969F, 0.999969F
};
	
const TTFloat32 kTTLookupQuarterSine[] = {		// 128 point quarter sine wave table
	0.000000F, 0.012272F, 0.024541F, 0.036807F, 0.049068F, 0.061321F, 0.073565F, 0.085797F, 
	0.098017F, 0.110222F, 0.122411F, 0.134581F, 0.146730F, 0.158858F, 0.170962F, 0.183040F, 
	0.195090F, 0.207111F, 0.219101F, 0.231058F, 0.242980F, 0.254866F, 0.266713F, 0.278520F, 
	0.290285F, 0.302006F, 0.313682F, 0.325310F, 0.336890F, 0.348419F, 0.359895F, 0.371317F, 
	0.382683F, 0.393992F, 0.405241F, 0.416430F, 0.427555F, 0.438616F, 0.449611F, 0.460539F, 
	0.471397F, 0.482184F, 0.492898F, 0.503538F, 0.514103F, 0.524590F, 0.534998F, 0.545325F, 
	0.555570F, 0.565732F, 0.575808F, 0.585798F, 0.595699F, 0.605511F, 0.615232F, 0.624859F, 
	0.634393F, 0.643832F, 0.653173F, 0.662416F, 0.671559F, 0.680601F, 0.689541F, 0.698376F, 
	0.707107F, 0.715731F, 0.724247F, 0.732654F, 0.740951F, 0.749136F, 0.757209F, 0.765167F, 
	0.773010F, 0.780737F, 0.788346F, 0.795837F, 0.803208F, 0.810457F, 0.817585F, 0.824589F, 
	0.831470F, 0.838225F, 0.844854F, 0.851355F, 0.857729F, 0.863973F, 0.870087F, 0.876070F, 
	0.881921F, 0.887640F, 0.893224F, 0.898674F, 0.903989F, 0.909168F, 0.914210F, 0.919114F, 
	0.923880F, 0.928506F, 0.932993F, 0.937339F, 0.941544F, 0.945607F, 0.949528F, 0.953306F, 
	0.956940F, 0.960431F, 0.963776F, 0.966976F, 0.970031F, 0.972940F, 0.975702F, 0.978317F, 
	0.980785F, 0.983105F, 0.985278F, 0.987301F, 0.989177F, 0.990903F, 0.992480F, 0.993907F, 
	0.995185F, 0.996313F, 0.997290F, 0.998118F, 0.998795F, 0.999322F, 0.999699F, 0.999925F 
}; 


/****************************************************************************************************/

TTElement::TTElement()
{
	;
}


TTElement::~TTElement()
{
	;
}


TTDataInfoPtr	ttDataTypeInfo[kNumTTDataTypes];

void TTDataInfo::addDataInfoForType(TTDataType type)
{
	ttDataTypeInfo[type] = new TTDataInfo;
	
	if(type == kTypeNone){
		ttDataTypeInfo[type]->name = TT("none");
		ttDataTypeInfo[type]->isNumerical = NO;
		ttDataTypeInfo[type]->bitdepth = 0;
	}
	
	else if(type == kTypeFloat32){
		ttDataTypeInfo[type]->name = TT("float32");
		ttDataTypeInfo[type]->isNumerical = YES;
		ttDataTypeInfo[type]->bitdepth = 32;
	}
	else if(type == kTypeFloat64){
		ttDataTypeInfo[type]->name = TT("float64");
		ttDataTypeInfo[type]->isNumerical = YES;
		ttDataTypeInfo[type]->bitdepth = 64;
	}
	else if(type == kTypeInt8){
		ttDataTypeInfo[type]->name = TT("int8");
		ttDataTypeInfo[type]->isNumerical = YES;
		ttDataTypeInfo[type]->bitdepth = 8;
	}
	else if(type == kTypeUInt8){
		ttDataTypeInfo[type]->name = TT("uint8");
		ttDataTypeInfo[type]->isNumerical = YES;
		ttDataTypeInfo[type]->bitdepth = 8;
	}
	else if(type == kTypeInt16){
		ttDataTypeInfo[type]->name = TT("int16");
		ttDataTypeInfo[type]->isNumerical = YES;
		ttDataTypeInfo[type]->bitdepth = 16;
	}
	else if(type == kTypeUInt16){
		ttDataTypeInfo[type]->name = TT("uint16");
		ttDataTypeInfo[type]->isNumerical = YES;
		ttDataTypeInfo[type]->bitdepth = 16;
	}
	else if(type == kTypeInt32){
		ttDataTypeInfo[type]->name = TT("int32");
		ttDataTypeInfo[type]->isNumerical = YES;
		ttDataTypeInfo[type]->bitdepth = 32;
	}
	else if(type == kTypeUInt32){
		ttDataTypeInfo[type]->name = TT("uint32");
		ttDataTypeInfo[type]->isNumerical = YES;
		ttDataTypeInfo[type]->bitdepth = 32;
	}
	else if(type == kTypeInt64){
		ttDataTypeInfo[type]->name = TT("int64");
		ttDataTypeInfo[type]->isNumerical = YES;
		ttDataTypeInfo[type]->bitdepth = 64;
	}
	else if(type == kTypeUInt64){
		ttDataTypeInfo[type]->name = TT("uint64");
		ttDataTypeInfo[type]->isNumerical = YES;
		ttDataTypeInfo[type]->bitdepth = 64;
	}
	
	else if(type == kTypeBoolean){
		ttDataTypeInfo[type]->name = TT("boolean");
		ttDataTypeInfo[type]->isNumerical = NO;
		ttDataTypeInfo[type]->bitdepth = 1;
	}
	else if(type == kTypeSymbol){
		ttDataTypeInfo[type]->name = TT("symbol");
		ttDataTypeInfo[type]->isNumerical = NO;
		ttDataTypeInfo[type]->bitdepth = -1;
	}
	else if(type == kTypeObject){
		ttDataTypeInfo[type]->name = TT("object");
		ttDataTypeInfo[type]->isNumerical = NO;
		ttDataTypeInfo[type]->bitdepth = -1;
	}
	else if(type == kTypePointer){
		ttDataTypeInfo[type]->name = TT("pointer");
		ttDataTypeInfo[type]->isNumerical = NO;
		ttDataTypeInfo[type]->bitdepth = sizeof(void*);
	}
	else if(type == kTypeString){
		ttDataTypeInfo[type]->name = TT("string");
		ttDataTypeInfo[type]->isNumerical = NO;
		ttDataTypeInfo[type]->bitdepth = -1;
	}
	else if(type == kTypeLocalValue){
		ttDataTypeInfo[type]->name = TT("value");
		ttDataTypeInfo[type]->isNumerical = NO;
		ttDataTypeInfo[type]->bitdepth = -1;
	}	
}



void TTLogMessage(TTImmutableCString message, ...)
{
	char	str[4096];
	va_list	ap;
	
	va_start(ap, message);
	vsnprintf(str, 4096, message, ap);
	va_end(ap);
	str[4095] = 0;
#ifdef TT_PLATFORM_WIN
	OutputDebugString(str);
#else
	// we fail to compile on linux with the current settings if we use fprintf()
	// fprintf(stderr, str);
	cerr << str;
#endif
}


void TTLogWarning(TTImmutableCString message, ...)
{
	char	str[4096];
	va_list	ap;
	
	va_start(ap, message);
	vsnprintf(str, 4096, message, ap);
	va_end(ap);
	str[4095] = 0;
#ifdef TT_PLATFORM_WIN
	OutputDebugString(str);
#else
	// we fail to compile on linux with the current settings if we use fprintf()
	// fprintf(stderr, str);
	cerr << str;
#endif
}


void TTLogError(TTImmutableCString message, ...)
{
	char	str[4096];
	va_list	ap;
	
	va_start(ap, message);
	vsnprintf(str, 4096, message, ap);
	va_end(ap);
	str[4095] = 0;
#ifdef TT_PLATFORM_WIN
	OutputDebugString(str);
#else
	// we fail to compile on linux with the current settings if we use fprintf()
	// fprintf(stderr, str);
	cerr << str;
#endif
}


void TTLogDebug(TTImmutableCString message, ...)
{
	if(ttEnvironment->debugBasic){
		char	str[4096];
		va_list	ap;
		
		va_start(ap, message);
		vsnprintf(str, 4096, message, ap);
		va_end(ap);
		str[4095] = 0;
#ifdef TT_PLATFORM_WIN
		OutputDebugString(str);
#else
	// we fail to compile on linux with the current settings if we use fprintf()
	// fprintf(stderr, str);
	cerr << str;
#endif
	}
}


