{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf270
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red201\green233\blue243;\red201\green233\blue243;
}
\pard\tx480\tx960\tx1440\tx1920\tx2400\tx2880\tx3360\tx3840\tx4320\tx4800\tx5280\tx5760\tx6240\tx6720\tx7200\tx7680\tx8160\tx8640\tx9120\tx9600\tx10080\tx10560\tx11040\tx11520\tx12000\tx12480\tx12960\tx13440\tx13920\tx14400\tx14880\tx15360\tx15840\tx16320\tx16800\tx17280\tx17760\tx18240\tx18720\tx19200\tx19680\tx20160\tx20640\tx21120\tx21600\tx22080\tx22560\tx23040\tx23520\tx24000\tx24480\tx24960\tx25440\tx25920\tx26400\tx26880\tx27360\tx27840\tx28320\tx28800\tx29280\tx29760\tx30240\tx30720\tx31200\tx31680\tx32160\tx32640\tx33120\tx33600\tx34080\tx34560\tx35040\tx35520\tx36000\tx36480\tx36960\tx37440\tx37920\tx38400\tx38880\tx39360\tx39840\tx40320\tx40800\tx41280\tx41760\tx42240\tx42720\tx43200\tx43680\tx44160\tx44640\tx45120\tx45600\tx46080\tx46560\tx47040\tx47520\tx48000\ql\qnatural\pardirnatural

\f0\fs20 \cf2 \CocoaLigature0 TTC++ Library for Audio Generation and Processing\
lue\
C++ Library for Audio Generation and \cb3 Processing\cb1 \
Version 0.5 Dev - ? January 2008\
_________________________________________________________________\
\
\
Introduction\
The TTBlue DSP Library is a set of open source, cross-platform, C++ objects for performing operations on vectors of audio samples. It the basis of commercial products such as Tap.Tools, Jade, and Hipno, and is used by other open source projects such as Jamoma.\
\
Features\
- Rapid development\
- Self-documenting and clear code-structure\
- Optimized for speed, including processing by vector\
- Attributes are range-checked and limited\
\
Installing\
Place the folder containing this ReadMe somewhere on your hard-drive. Then Make sure your compiler has access to it in order to compile the code.\
\
Documentation / API\
Doxygen generated documentation is located in the "documentation" folder.\
\
License\
TTBlue is licensed as open source software under the terms of the GNU LPGL.\
\
Known Issues & Wish List\
- set_sr() needs to be over-ridden in tap_delay, tap_comb, etc.\
- sample-rate reduction in the degrade object doesn't sound quite right (compare to MSP's degrade~ which is what I'm trying to emulate).\
- would like to add polyphonic handling\
- would like some type of a scheduler\
- The gaussian function in tap_buffer::fill() does not produce the correct results.\
- Need to make a sah object (especially for granular applications)...\
- implement Stephan's 64bit noise:\
f(Pn) = Pn + K * Pn * (1 - Pn) = p(n+1)\
n = nth value for p (initial value of p = 0.9)\
k is a constant - e.g. 3.0\
09 + 9 * 0.9 * (1.0 - 0.9)\
- Need to implement multi-channel buffers\
- Need to add file reading to tap_buffer\
- Need to finish tap_buffer_record - in part so that tap.sustain~ can be made into an external (for reliable operation in general, and also at reduced sample rates).\
- The polynomial interpolation in the tap_delay object doesn't work properly - just use linear (which is the default) for the time being.\
- MUST add interpolation for downsampling / upsampling object\
\
More Information\
This project hosted by Electrotap and SourceForge.\
\
Change Log\
\
Version 0.5.0 -- ? January 2008\
- \cb4 added 2nd order Butterworth filters (ported from tl.objects)\cb1 \
\cb4 - added 4th order Linkwitz Riley filters (ported from tl.objects)\
- adding a bunch more Butterworth and Linkwitz-Riley high- and lowpass filters\
\cb1 \
Version 0.4 -- unreleased (and abandoned)\
- re-write in Objective-C\
- leveraging features of ObjC such as key-value coding\
- abandoned because of extremely excessive difficulties making things work on Windows\
\
Version 0.3 -- unreleased\
- multichannel handling\
- dynamic-type value object used for all messaging\
\
Version 0.2.5 -- 25 February 2007\
- Many incremental improvements, including thread-safety fixes\
- Stub code added for major changes that are coming in version 0.3\
* Documentation is woefully out of date\
\
Version 0.2.1 -- 21 June 2005\
- Objects allocating blocks of memory now, for improved safety, ensure that the pointer is null before trying to allocate the memory.  This applies to the following objects:\
	tt_allpass\
- clumsy conditional precompiler stuff in clip() removed\
- mem_alloc() now ensures that memory is cleared when allocated\
- minor improvements to mem_free() for non-Max, Macintosh targets\
- when tt_buffer allocates new memory, it now only frees the previous memory if it actually allocated and owns that memory \
* fixed bugs in limit_min() and limit_max()\
\
Version 0.2\
- Naming convention of all classes is now consistent (uses "tt_")\
- tt_overdrive has a new stereo dsp_vector_calc() routine\
- integrated dc-blocking added to both overdrive and limiter objects\
\
Version 0.1.1\
- Documentation updated (most notably the intro page)\
- Examples separated from the main package \
\
Version 0.1\
1. Initial Developer Release\
\
}