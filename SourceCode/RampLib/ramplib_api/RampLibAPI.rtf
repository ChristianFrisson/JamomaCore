{\rtf1\ansi\deff1\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\fswiss\fprq0\fcharset77 ArialMT;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\fswiss\fprq0\fcharset77 ArialMT;}{\f4\fswiss\fprq0\fcharset77 Arial-BoldMT;}{\f5\fmodern\fprq1\fcharset77 CourierNewPSMT;}{\f6\fnil\fprq2\fcharset0 MS Mincho;}{\f7\fnil\fprq2\fcharset0 Tahoma;}}
{\colortbl;\red0\green0\blue0;\red128\green128\blue128;}
{\stylesheet{\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044\snext1 Normal;}
{\s2\sb240\sa120\keepn\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af7\afs28\lang255\ltrch\dbch\af6\langfe255\hich\f2\fs28\lang1044\loch\f2\fs28\lang1044\sbasedon1\snext3 Heading;}
{\s3\sa120\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044\sbasedon1\snext3 Body Text;}
{\s4\sa120\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044\sbasedon3\snext4 List;}
{\s5\sb120\sa120\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ai\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\i\loch\f1\fs24\lang1044\i\sbasedon1\snext5 caption;}
{\s6\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044\sbasedon1\snext6 Index;}
}
{\info{\creatim\yr2008\mo1\dy16\hr12\min28}{\revtim\yr1601\mo1\dy1\hr0\min0}{\printim\yr1601\mo1\dy1\hr0\min0}{\comment StarWriter}{\vern6800}}\deftab720
{\*\pgdsctbl
{\pgdsc0\pgdscuse195\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\pgdscnxt0 Standard;}}
{\*\pgdscno0}\paperh15840\paperw12240\margl1800\margr1800\margt1440\margb1440\sectd\sbknone\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
\pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs42\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs42\lang1044\loch\f1\fs42\lang1044 {\rtlch \ltrch\loch\f1\fs42\lang1044\i0\b0 Jamoma RampLib API}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 _______________________________________________}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs30\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs30\lang1044\loch\f1\fs30\lang1044 {\rtlch \ltrch\loch\f1\fs30\lang1044\i0\b0 Introduction}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 The Jamoma RampLib API provides a means by which to create and use "Ramp Units" in Jamoma.  A Ramp Unit is a self-contained algorithm that can slide from an existing value to a new value over a specified amount of time.  Ramp Units may use a variety of dif
ferent timing mechanisms, functions for defining the shape of the ramp, etc.}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\fs22\loch\fs22 The Jamoma project uses these Ramp Units inside of Max externals such as }}{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\f4\fs22\b\loch\f4\fs22\b jcom.parameter}{\rtlch\ltrch\dbch\hich\fs22\loch\fs22 , }{\rtlch\ltrch\dbch\hich\f4\fs22\b\loch\f4\fs22\b jcom.message}{\rtlch\ltrch\dbch\hich\fs22\loch\fs22 , and }{\rtlch\ltrch\dbch\hich\f4\fs22\b\loch\f4\fs22\b jcom.ramp}{\rtlch\ltrch\dbch\hich\fs22\loch\fs22 .  However, the API is designed to be agnostic with terms of the hosting environment and thus can be used to provide ramping functionality i
n other hosts such as a Pd or SuperCollider.}}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 This document discusses both the creation of a new Ramp Unit, as well as the use of a Ramp Unit from within a Max external.  The best documentation of this, however, is the source code for the aforementioned Max externals in the Jamoma project.}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs30\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs30\lang1044\loch\f1\fs30\lang1044 {\rtlch \ltrch\loch\f1\fs30\lang1044\i0\b0 How to create a Ramp Unit}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 Every Ramp Unit should consist of two files: a source file and a header file that provides an interface for the source file.  The header file must contain a data structure that contains variables for the instance of a particular Ramp Unit and prototypes fo
r the functions in the source file.  It should also use a preprocessor directive to include the ramplib.h header file.}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 Every Ramp Unit must define the following functions:}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 \tab create()\tab \tab Allocates memory, sets initial state, sets callback function to the host}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 \tab destroy()\tab Frees memory}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 \tab attrset()\tab \tab Set any attributes your Ramp Unit may have}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 \tab attrget()\tab Get the value of an attribute}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 \tab go()\tab \tab start ramping to a new value over a period of time}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 \tab set()\tab \tab stop the ramp (if it is going) and set its value}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 \tab stop()\tab \tab stop the ramp}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 \tab {\*\bkmkstart DDE_LINK}tick()  \tab \tab execute one step of the ramp}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 {\*\bkmkend DDE_LINK}\tab setclock()\tab set the clock used if the ramp unit depends on timing information}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 All parameters of a Ramp Unit must be set using attrset() and not by directly accessing a member variable or defining a custom accessor if possible.  The attrset() method receives both a selector and a value.  The selector should be an int defining what ha
ppens with the incoming value.  Furthermore, the selector should be given a self-documenting name by using an enum such as the one found in ramplib.h.}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 The create() method must accept two arguments.  The first argument is a function pointer provided by the host.  The function pointed to by this pointer will be called when the Ramp Unit generates a new value.  The second argument is a generic pointer provi
ded by the host.  This pointer should be passed back to the host via its callback method.  The Ramp Unit does not directly do anything with this second pointer except pass it back to the host.}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs24\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs24\lang1044\loch\f1\fs24\lang1044{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\fs22\loch\fs22 Please reference the example Ramp Unit files for }}{\rtlch \ltrch\loch\f1\fs24\lang1044\i0\b0{\rtlch\ltrch\dbch\hich\f4\fs22\b\loch\f4\fs22\b none.rampunit }{\rtlch\ltrch\dbch\hich\fs22\loch\fs22 and }{\rtlch\ltrch\dbch\hich\f4\fs22\b\loch\f4\fs22\b linear.sched.rampunit }{\rtlch\ltrch\dbch\hich\fs22\loch\fs22 for a model of how to create your own Ramp Units.}}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs30\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs30\lang1044\loch\f1\fs30\lang1044 {\rtlch \ltrch\loch\f1\fs30\lang1044\i0\b0 How to use a Ramp Unit in a Max External}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 As a part of the RampLib, a C++ wrapper class has been created that wraps a RampUnit as an object.  Using this class is the recommended means of loading and using a RampUnit.  See RampUnitWrap.h for the interface.}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 THE 7 STEP TUTORIAL (using the linear.max ramp unit as an example)}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 1. Add the header and source file for RampUnitWrap to the project}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af5\afs22\lang255\ltrch\dbch\af5\langfe255\hich\f5\fs22\lang1044\loch\f5\fs22\lang1044 {\rtlch \ltrch\loch\f5\fs22\lang1044\i0\b0 \tab RampUnitWrap.h}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af5\afs22\lang255\ltrch\dbch\af5\langfe255\hich\f5\fs22\lang1044\loch\f5\fs22\lang1044 {\rtlch \ltrch\loch\f5\fs22\lang1044\i0\b0 \tab RampUnitWrap.cpp}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 2. Include the header in your Max externals source file}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af5\afs22\lang255\ltrch\dbch\af5\langfe255\hich\f5\fs22\lang1044\loch\f5\fs22\lang1044 {\rtlch \ltrch\loch\f5\fs22\lang1044\i0\b0 \tab #include "RampUnitWrap.h"}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 3. Add a pointer to the object to your Max external's data structure}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af5\afs22\lang255\ltrch\dbch\af5\langfe255\hich\f5\fs22\lang1044\loch\f5\fs22\lang1044 {\rtlch \ltrch\loch\f5\fs22\lang1044\i0\b0 \tab rampunit\tab *my_ramp;}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 4. Create a callback method.  This will be called by the ramp unit when it produces a new value.}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af5\afs22\lang255\ltrch\dbch\af5\langfe255\hich\f5\fs22\lang1044\loch\f5\fs22\lang1044 {\rtlch \ltrch\loch\f5\fs22\lang1044\i0\b0 \tab void myexternal_callback(void *v, float value)}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af5\afs22\lang255\ltrch\dbch\af5\langfe255\hich\f5\fs22\lang1044\loch\f5\fs22\lang1044 {\rtlch \ltrch\loch\f5\fs22\lang1044\i0\b0 \tab \{\tab }
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af5\afs22\lang255\ltrch\dbch\af5\langfe255\hich\f5\fs22\lang1044\loch\f5\fs22\lang1044 {\rtlch \ltrch\loch\f5\fs22\lang1044\i0\b0 \tab \tab t_myexternal *x = (t_myexternal *)v;}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af5\afs22\lang255\ltrch\dbch\af5\langfe255\hich\f5\fs22\lang1044\loch\f5\fs22\lang1044 {\rtlch \ltrch\loch\f5\fs22\lang1044\i0\b0 \tab \tab outlet_float(x->outlets[k_outlet_value], value);}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af5\afs22\lang255\ltrch\dbch\af5\langfe255\hich\f5\fs22\lang1044\loch\f5\fs22\lang1044 {\rtlch \ltrch\loch\f5\fs22\lang1044\i0\b0 \tab \}}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 \tab }
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 5. Instantiate the ramp unit object in your new() method, passing the following as arguments:}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 \tab A. The name of the rampunit (without the file extension) as a string}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 \tab B. The address of your callback function}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 \tab C. An optional baton (generic pointer that will be passed back to your callback function)}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af5\afs22\lang255\ltrch\dbch\af5\langfe255\hich\f5\fs22\lang1044\loch\f5\fs22\lang1044 {\rtlch \ltrch\loch\f5\fs22\lang1044\i0\b0 \tab x->my_ramp = new rampunit("linear.sched", myexternal_callback, (void *)x);}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 \tab }
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 6. Delete the ramp unit instance in your free() method}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af5\afs22\lang255\ltrch\dbch\af5\langfe255\hich\f5\fs22\lang1044\loch\f5\fs22\lang1044 {\rtlch \ltrch\loch\f5\fs22\lang1044\i0\b0 \tab delete x->my_ramp;}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 \tab }
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 7. Add additional methods as needed}
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 {\rtlch \ltrch\loch\f1\fs22\lang1044\i0\b0 The above method will compile the code directly into your external.  There are methods for making the ramp unit a dynamically loaded plug-in to the external as well.  }
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par \pard\plain \ltrpar\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af1\afs22\lang255\ltrch\dbch\af1\langfe255\hich\f1\fs22\lang1044\loch\f1\fs22\lang1044 
\par }